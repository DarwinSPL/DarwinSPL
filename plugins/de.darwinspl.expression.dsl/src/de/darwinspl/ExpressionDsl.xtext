// automatically generated by Xtext
grammar de.darwinspl.ExpressionDsl with org.eclipse.xtext.common.Terminals

import "http://hyvar-project.eu/feature/expression/1.0" 
import "http://hyvar-project.eu/feature/1.0" as feature
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/context/1.0" as context
import "http://hyvar-project.eu/feature/dataValues/1.0" as dataValues




HyExpression returns HyExpression:
	HyAndExpression;
	
	
HyAndExpression returns HyExpression:
	HyOrExpression({HyAndExpression.operand1=current} ('&&') operand2=HyOrExpression)*;


HyOrExpression returns HyExpression:
	HyImpliesExpression({HyOrExpression.operand1=current} ('||') operand2=HyImpliesExpression)*;
	
	
HyImpliesExpression returns HyExpression:
	HyEquivalenceExpression({HyImpliesExpression.operand1=current} ('->') operand2=HyEquivalenceExpression)*;
	
	
HyEquivalenceExpression returns HyExpression:
	TerminalExpression ({HyEquivalenceExpression.operand1=current} ('<->') operand2=TerminalExpression)*;

TerminalExpression returns HyExpression:	
	HyFeatureReferenceExpression |
	HyNestedExpression |
	HyConditionalFeatureReferenceExpression |
	HyNotExpression |
	HyBooleanValueExpression |
	(=> HyArithmeticalComparisonExpression);


HyNestedExpression returns HyNestedExpression:
	'(' operand=HyExpression ')';
	

HyNotExpression returns HyNotExpression:
	'!' operand=TerminalExpression;
	

HyFeatureReferenceExpression returns HyFeatureReferenceExpression:
	feature=[feature::HyFeature | STRING] (versionRestriction=HyVersionRestriction)?;
	
	
HyConditionalFeatureReferenceExpression returns HyConditionalFeatureReferenceExpression:
	"?" feature=[feature::HyFeature | STRING] (versionRestriction=HyVersionRestriction)?;	
	

HyVersionRestriction returns HyVersionRestriction:
	HyRelativeVersionRestriction | HyVersionRangeRestriction;


HyRelativeVersionRestriction returns HyRelativeVersionRestriction:
	 "[" operator=HyRelativeVersionRestrictionOperator version=[feature::HyVersion] "]";
	

enum HyRelativeVersionRestrictionOperator returns HyRelativeVersionRestrictionOperator:
	lessThan = "<" | lessThanOrEqual = "<=" | equal = "=" | greaterThanOrEqual = ">=" | greaterThan = ">";
		

HyVersionRangeRestriction returns HyVersionRangeRestriction:
"[" lowerIncluded?= 'true' | 'false' lowerVersion=[feature::HyVersion | STRING] "-" upperIncluded?= 'true' | 'false' upperVersion=[feature::HyVersion | STRING] "]";


HyBooleanValueExpression returns HyBooleanValueExpression:
	{HyBooleanValueExpression} (value?='true' | 'false');
	


HyArithmeticalComparisonExpression returns HyArithmeticalComparisonExpression: 
	HyBinaryArithmeticalComparisonExpression;

HyBinaryArithmeticalComparisonExpression returns HyBinaryArithmeticalComparisonExpression:
	HyGreaterExpression;
	
// Used syntactic predicates as operand1 can be nested arbitrarily and therefore, the ANTLR does not know which operator to take
HyGreaterExpression returns HyBinaryArithmeticalComparisonExpression:
	(=> operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression) | HyLessExpression;
	
HyLessExpression returns HyBinaryArithmeticalComparisonExpression:
	(=> operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression) | HyGreaterOrEqualExpression;

HyGreaterOrEqualExpression returns HyBinaryArithmeticalComparisonExpression:
	(=> operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression) | HyLessOrEqualExpression;

HyLessOrEqualExpression returns HyBinaryArithmeticalComparisonExpression:
	(=> operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression) | HyEqualExpression;

HyEqualExpression returns HyBinaryArithmeticalComparisonExpression:
	(=> operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression) | HyNotEqualExpression;

HyNotEqualExpression returns HyBinaryArithmeticalComparisonExpression:
	operand1=HyArithmeticalValueExpression '!=' operand2=HyArithmeticalValueExpression;


HyArithmeticalValueExpression returns HyArithmeticalValueExpression:
	HyAdditionExpression;
	
	
HyAdditionExpression returns HyArithmeticalValueExpression:
	HySubtractionExpression({HyAdditionExpression.operand1=current} ('+') operand2=HySubtractionExpression)*;


HySubtractionExpression returns HyArithmeticalValueExpression:
	HyMultiplicationExpression({HySubtractionExpression.operand1=current} ('-') operand2=HyMultiplicationExpression)*;
	
	
HyMultiplicationExpression returns HyArithmeticalValueExpression:
	HyDivisionExpression({HyMultiplicationExpression.operand1=current} ('*') operand2=HyDivisionExpression)*;
	
	
HyDivisionExpression returns HyArithmeticalValueExpression:
	TerminalArithmeticalExpression ({HyDivisionExpression.operand1=current} ('/') operand2=TerminalArithmeticalExpression)*;
	
TerminalArithmeticalExpression returns HyArithmeticalValueExpression:
	HyValueExpression 
	| HyNestedArithmeticalValueExpression
	/*| HyNegationExpression*/
	| (=> HyContextInformationReferenceExpression) 
	| HyAttributeReferenceExpression;

HyValueExpression returns HyValueExpression:
	value=HyValue;

HyValue returns dataValues::HyValue:
	HyNumberValue | HyStringValue | HyBooleanValue | HyEnumValue;

HyNumberValue returns dataValues::HyNumberValue:
	value=EInt;

HyStringValue returns dataValues::HyStringValue:
	value=STRING;

HyBooleanValue returns dataValues::HyBooleanValue:
	{dataValues::HyBooleanValue} (value?='true' | 'false');

HyEnumValue returns dataValues::HyEnumValue:
	^enum=[dataValues::HyEnum|STRING]'.'enumLiteral=[dataValues::HyEnumLiteral|STRING];


HyNestedArithmeticalValueExpression returns HyNestedArithmeticalValueExpression:
	'(' operand=HyArithmeticalValueExpression ')';
	
HyContextInformationReferenceExpression returns HyContextInformationReferenceExpression:
	contextInformation=[context::HyContextualInformation|STRING];

HyAttributeReferenceExpression returns HyAttributeReferenceExpression:
	feature=[feature::HyFeature|STRING]'.'attribute=[feature::HyFeatureAttribute|STRING];
	
	// Not working right now. Necessary?
//HyNegationExpression returns HyNegationExpression:
//	'-' operand=HyArithmeticalValueExpression;


//QualifiedName returns ecore::EString:
//ID ("." ID)*;

EInt returns ecore::EInt:
	'-'? INT;

//terminal DATE returns ecore::EDate:
//('0'..'9')*('/')('0' | '1')('0'..'9')('/')('0'('1'..'9'))|(('0'..'2')('1'..'9'))|('3'('0'..'1'));

