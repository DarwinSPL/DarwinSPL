// automatically generated by Xtext
grammar de.darwinspl.ExpressionDsl with org.eclipse.xtext.common.Terminals

import "http://hyvar-project.eu/feature/expression/1.0" as expr
import "http://hyvar-project.eu/feature/1.0" as feature
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://hyvar-project.eu/feature/context/1.0" as context
import "http://hyvar-project.eu/feature/dataValues/1.0" as dataValues




HyExpression returns expr::HyExpression:
	HyImpliesExpression;
	
	
HyImpliesExpression returns expr::HyExpression:
	HyEquivalenceExpression({expr::HyImpliesExpression.operand1=current} ('->') operand2=HyEquivalenceExpression)*;
	
	
HyEquivalenceExpression returns expr::HyExpression:
	HyAndExpression ({expr::HyEquivalenceExpression.operand1=current} ('<->') operand2=HyAndExpression)*;
	
	
HyAndExpression returns expr::HyExpression:
	HyOrExpression({expr::HyAndExpression.operand1=current} ('&&') operand2=HyOrExpression)*;


HyOrExpression returns expr::HyExpression:
	TerminalExpression({expr::HyOrExpression.operand1=current} ('||') operand2=TerminalExpression)*;

TerminalExpression returns expr::HyExpression:	
	(=> HyBinaryArithmeticalComparisonExpression) |
	HyFeatureReferenceExpression |
	HyNestedExpression |
	HyConditionalFeatureReferenceExpression |
	HyNotExpression |
	HyBooleanValueExpression;

HyNestedExpression returns expr::HyNestedExpression:
	'(' operand=HyExpression ')';
	

HyNotExpression returns expr::HyNotExpression:
	'!' operand=TerminalExpression;
	

HyFeatureReferenceExpression returns expr::HyFeatureReferenceExpression:
	feature=[feature::HyFeature | STRING] (versionRestriction=HyVersionRestriction)?;
	
	
HyConditionalFeatureReferenceExpression returns expr::HyConditionalFeatureReferenceExpression:
	"?" feature=[feature::HyFeature | STRING] (versionRestriction=HyVersionRestriction)?;	
	

HyVersionRestriction returns expr::HyVersionRestriction:
	HyRelativeVersionRestriction | HyVersionRangeRestriction;


HyRelativeVersionRestriction returns expr::HyRelativeVersionRestriction:
	 "[" operator=HyRelativeVersionRestrictionOperator version=[feature::HyVersion] "]";
	

enum HyRelativeVersionRestrictionOperator returns expr::HyRelativeVersionRestrictionOperator:
	lessThan = "<" | lessThanOrEqual = "<=" | equal = "=" | greaterThanOrEqual = ">=" | greaterThan = ">";
		

HyVersionRangeRestriction returns expr::HyVersionRangeRestriction:
"[" lowerIncluded?= 'true' | 'false' lowerVersion=[feature::HyVersion | STRING] "-" upperIncluded?= 'true' | 'false' upperVersion=[feature::HyVersion | STRING] "]";


HyBooleanValueExpression returns expr::HyBooleanValueExpression:
	{expr::HyBooleanValueExpression} (value?='true' | 'false');
	


HyArithmeticalComparisonExpression returns expr::HyArithmeticalComparisonExpression: 
	HyBinaryArithmeticalComparisonExpression;

HyBinaryArithmeticalComparisonExpression returns expr::HyBinaryArithmeticalComparisonExpression:
	 HyGreaterOrEqualExpression | HyGreaterExpression |  HyLessOrEqualExpression | HyLessExpression  | HyNotEqualExpression | HyEqualExpression;

HyGreaterExpression returns expr::HyGreaterExpression:
	operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression;
	
HyLessExpression returns expr::HyLessExpression:
	operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression;

HyGreaterOrEqualExpression returns expr::HyGreaterOrEqualExpression:
	operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression;

HyLessOrEqualExpression returns expr::HyLessOrEqualExpression:
	operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression;

HyEqualExpression returns expr::HyEqualExpression:
	operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression;

HyNotEqualExpression returns expr::HyNotEqualExpression:
	operand1=HyArithmeticalValueExpression '!=' operand2=HyArithmeticalValueExpression;


HyArithmeticalValueExpression returns expr::HyArithmeticalValueExpression:
	HyValueExpression;
	
	
HyAdditionExpression returns expr::HyArithmeticalValueExpression:
	HySubtractionExpression({expr::HyAdditionExpression.operand1=current} ('+') operand2=HySubtractionExpression)*;


HySubtractionExpression returns expr::HyArithmeticalValueExpression:
	HyMultiplicationExpression({expr::HySubtractionExpression.operand1=current} ('-') operand2=HyMultiplicationExpression)*;
	
	
HyMultiplicationExpression returns expr::HyArithmeticalValueExpression:
	HyDivisionExpression({expr::HyMultiplicationExpression.operand1=current} ('*') operand2=HyDivisionExpression)*;
	
	
HyDivisionExpression returns expr::HyArithmeticalValueExpression:
	TerminalArithmeticalExpression ({expr::HyDivisionExpression.operand1=current} ('/') operand2=TerminalArithmeticalExpression)*;
	
TerminalArithmeticalExpression returns expr::HyArithmeticalValueExpression:
	HyValueExpression 
	| HyNestedArithmeticalValueExpression
	/*| HyNegationExpression*/
	| (=> HyContextInformationReferenceExpression) 
	| HyAttributeReferenceExpression;

HyValueExpression returns expr::HyValueExpression:
	value=HyValue;

HyValue returns dataValues::HyValue:
	HyNumberValue | HyStringValue | HyBooleanValue | HyEnumValue;

HyNumberValue returns dataValues::HyNumberValue:
	value=EInt;

HyStringValue returns dataValues::HyStringValue:
	value=STRING;

HyBooleanValue returns dataValues::HyBooleanValue:
	{dataValues::HyBooleanValue} (value?='true' | 'false');

HyEnumValue returns dataValues::HyEnumValue:
	^enum=[dataValues::HyEnum|STRING]'.'enumLiteral=[dataValues::HyEnumLiteral|STRING];


HyNestedArithmeticalValueExpression returns expr::HyNestedArithmeticalValueExpression:
	'(' operand=HyArithmeticalValueExpression ')';
	
HyContextInformationReferenceExpression returns expr::HyContextInformationReferenceExpression:
	contextInformation=[context::HyContextualInformation|STRING];

HyAttributeReferenceExpression returns expr::HyAttributeReferenceExpression:
	feature=[feature::HyFeature|STRING]'.'attribute=[feature::HyFeatureAttribute|STRING];
	
	// Not working right now. Necessary?
//HyNegationExpression returns HyNegationExpression:
//	'-' operand=HyArithmeticalValueExpression;


//QualifiedName returns ecore::EString:
//ID ("." ID)*;

EInt returns ecore::EInt:
	'-'? INT;

//terminal DATE returns ecore::EDate:
//('0'..'9')*('/')('0' | '1')('0'..'9')('/')('0'('1'..'9'))|(('0'..'2')('1'..'9'))|('3'('0'..'1'));

