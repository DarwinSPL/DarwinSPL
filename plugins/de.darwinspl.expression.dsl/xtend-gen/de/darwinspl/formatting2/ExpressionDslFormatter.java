/**
 * generated by Xtext 2.12.0
 */
package de.darwinspl.formatting2;

import com.google.inject.Inject;
import de.darwinspl.services.ExpressionDslGrammarAccess;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ExpressionDslFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private ExpressionDslGrammarAccess _expressionDslGrammarAccess;
  
  protected void _format(final HyAndExpression hyAndExpression, @Extension final IFormattableDocument document) {
    document.<HyExpression>format(hyAndExpression.getOperand2());
    document.<HyExpression>format(hyAndExpression.getOperand1());
  }
  
  protected void _format(final HyOrExpression hyOrExpression, @Extension final IFormattableDocument document) {
    document.<HyExpression>format(hyOrExpression.getOperand2());
    document.<HyExpression>format(hyOrExpression.getOperand1());
  }
  
  public void format(final Object hyAndExpression, final IFormattableDocument document) {
    if (hyAndExpression instanceof HyAndExpression) {
      _format((HyAndExpression)hyAndExpression, document);
      return;
    } else if (hyAndExpression instanceof HyOrExpression) {
      _format((HyOrExpression)hyAndExpression, document);
      return;
    } else if (hyAndExpression instanceof XtextResource) {
      _format((XtextResource)hyAndExpression, document);
      return;
    } else if (hyAndExpression instanceof EObject) {
      _format((EObject)hyAndExpression, document);
      return;
    } else if (hyAndExpression == null) {
      _format((Void)null, document);
      return;
    } else if (hyAndExpression != null) {
      _format(hyAndExpression, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(hyAndExpression, document).toString());
    }
  }
}
