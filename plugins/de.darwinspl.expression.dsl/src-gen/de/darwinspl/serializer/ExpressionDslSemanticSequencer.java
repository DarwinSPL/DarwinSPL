/*
 * generated by Xtext 2.12.0
 */
package de.darwinspl.serializer;

import com.google.inject.Inject;
import de.darwinspl.services.ExpressionDslGrammarAccess;
import eu.hyvar.dataValues.HyBooleanValue;
import eu.hyvar.dataValues.HyDataValuesPackage;
import eu.hyvar.dataValues.HyEnumValue;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.dataValues.HyStringValue;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBinaryArithmeticalComparisonExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyExpressionPackage;
import eu.hyvar.feature.expression.HyFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyImpliesExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNestedArithmeticalValueExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyNotExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ExpressionDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ExpressionDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HyDataValuesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyDataValuesPackage.HY_BOOLEAN_VALUE:
				sequence_HyBooleanValue(context, (HyBooleanValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_VALUE:
				sequence_HyEnumValue(context, (HyEnumValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_NUMBER_VALUE:
				sequence_HyNumberValue(context, (HyNumberValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_STRING_VALUE:
				sequence_HyStringValue(context, (HyStringValue) semanticObject); 
				return; 
			}
		else if (epackage == HyExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyExpressionPackage.HY_ADDITION_EXPRESSION:
				sequence_HyAdditionExpression(context, (HyAdditionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_AND_EXPRESSION:
				sequence_HyAndExpression(context, (HyAndExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_ATTRIBUTE_REFERENCE_EXPRESSION:
				sequence_HyAttributeReferenceExpression(context, (HyAttributeReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_BINARY_ARITHMETICAL_COMPARISON_EXPRESSION:
				if (rule == grammarAccess.getHyExpressionRule()
						|| rule == grammarAccess.getHyImpliesExpressionRule()
						|| action == grammarAccess.getHyImpliesExpressionAccess().getHyImpliesExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getHyEquivalenceExpressionRule()
						|| action == grammarAccess.getHyEquivalenceExpressionAccess().getHyEquivalenceExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getHyAndExpressionRule()
						|| action == grammarAccess.getHyAndExpressionAccess().getHyAndExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getHyOrExpressionRule()
						|| action == grammarAccess.getHyOrExpressionAccess().getHyOrExpressionOperand1Action_1_0()
						|| rule == grammarAccess.getTerminalExpressionRule()
						|| rule == grammarAccess.getHyArithmeticalComparisonExpressionRule()
						|| rule == grammarAccess.getHyBinaryArithmeticalComparisonExpressionRule()
						|| rule == grammarAccess.getHyGreaterExpressionRule()) {
					sequence_HyEqualExpression_HyGreaterExpression_HyGreaterOrEqualExpression_HyLessExpression_HyLessOrEqualExpression_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHyLessExpressionRule()) {
					sequence_HyEqualExpression_HyGreaterOrEqualExpression_HyLessExpression_HyLessOrEqualExpression_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHyGreaterOrEqualExpressionRule()) {
					sequence_HyEqualExpression_HyGreaterOrEqualExpression_HyLessOrEqualExpression_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHyLessOrEqualExpressionRule()) {
					sequence_HyEqualExpression_HyLessOrEqualExpression_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHyEqualExpressionRule()) {
					sequence_HyEqualExpression_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else if (rule == grammarAccess.getHyNotEqualExpressionRule()) {
					sequence_HyNotEqualExpression(context, (HyBinaryArithmeticalComparisonExpression) semanticObject); 
					return; 
				}
				else break;
			case HyExpressionPackage.HY_BOOLEAN_VALUE_EXPRESSION:
				sequence_HyBooleanValueExpression(context, (HyBooleanValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONDITIONAL_FEATURE_REFERENCE_EXPRESSION:
				sequence_HyConditionalFeatureReferenceExpression(context, (HyConditionalFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION:
				sequence_HyContextInformationReferenceExpression(context, (HyContextInformationReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_DIVISION_EXPRESSION:
				sequence_HyDivisionExpression(context, (HyDivisionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUIVALENCE_EXPRESSION:
				sequence_HyEquivalenceExpression(context, (HyEquivalenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_FEATURE_REFERENCE_EXPRESSION:
				sequence_HyFeatureReferenceExpression(context, (HyFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IMPLIES_EXPRESSION:
				sequence_HyImpliesExpression(context, (HyImpliesExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MULTIPLICATION_EXPRESSION:
				sequence_HyMultiplicationExpression(context, (HyMultiplicationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_ARITHMETICAL_VALUE_EXPRESSION:
				sequence_HyNestedArithmeticalValueExpression(context, (HyNestedArithmeticalValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_EXPRESSION:
				sequence_HyNestedExpression(context, (HyNestedExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NOT_EXPRESSION:
				sequence_HyNotExpression(context, (HyNotExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_OR_EXPRESSION:
				sequence_HyOrExpression(context, (HyOrExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_RELATIVE_VERSION_RESTRICTION:
				sequence_HyRelativeVersionRestriction(context, (HyRelativeVersionRestriction) semanticObject); 
				return; 
			case HyExpressionPackage.HY_SUBTRACTION_EXPRESSION:
				sequence_HySubtractionExpression(context, (HySubtractionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VALUE_EXPRESSION:
				sequence_HyValueExpression(context, (HyValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VERSION_RANGE_RESTRICTION:
				sequence_HyVersionRangeRestriction(context, (HyVersionRangeRestriction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyAdditionExpression
	 *     HyAdditionExpression returns HyAdditionExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyAdditionExpression
	 *
	 * Constraint:
	 *     (operand1=HyAdditionExpression_HyAdditionExpression_1_0 operand2=HySubtractionExpression)
	 */
	protected void sequence_HyAdditionExpression(ISerializationContext context, HyAdditionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyAdditionExpressionAccess().getOperand2HySubtractionExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyAndExpression
	 *     HyImpliesExpression returns HyAndExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyAndExpression
	 *     HyEquivalenceExpression returns HyAndExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyAndExpression
	 *     HyAndExpression returns HyAndExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyAndExpression
	 *
	 * Constraint:
	 *     (operand1=HyAndExpression_HyAndExpression_1_0 operand2=HyOrExpression)
	 */
	protected void sequence_HyAndExpression(ISerializationContext context, HyAndExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyAndExpressionAccess().getHyAndExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyAndExpressionAccess().getOperand2HyOrExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyAttributeReferenceExpression
	 *     HyAdditionExpression returns HyAttributeReferenceExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyAttributeReferenceExpression
	 *     HySubtractionExpression returns HyAttributeReferenceExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyAttributeReferenceExpression
	 *     HyMultiplicationExpression returns HyAttributeReferenceExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyAttributeReferenceExpression
	 *     HyDivisionExpression returns HyAttributeReferenceExpression
	 *     HyDivisionExpression.HyDivisionExpression_1_0 returns HyAttributeReferenceExpression
	 *     TerminalArithmeticalExpression returns HyAttributeReferenceExpression
	 *     HyAttributeReferenceExpression returns HyAttributeReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|STRING] attribute=[HyFeatureAttribute|STRING])
	 */
	protected void sequence_HyAttributeReferenceExpression(ISerializationContext context, HyAttributeReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyAttributeReferenceExpressionAccess().getFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__FEATURE, false));
		feeder.accept(grammarAccess.getHyAttributeReferenceExpressionAccess().getAttributeHyFeatureAttributeSTRINGTerminalRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_ATTRIBUTE_REFERENCE_EXPRESSION__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyBooleanValueExpression
	 *     HyImpliesExpression returns HyBooleanValueExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyBooleanValueExpression
	 *     HyEquivalenceExpression returns HyBooleanValueExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyBooleanValueExpression
	 *     HyAndExpression returns HyBooleanValueExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyBooleanValueExpression
	 *     HyOrExpression returns HyBooleanValueExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyBooleanValueExpression
	 *     TerminalExpression returns HyBooleanValueExpression
	 *     HyBooleanValueExpression returns HyBooleanValueExpression
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_HyBooleanValueExpression(ISerializationContext context, HyBooleanValueExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyValue returns HyBooleanValue
	 *     HyBooleanValue returns HyBooleanValue
	 *
	 * Constraint:
	 *     value?='true'?
	 */
	protected void sequence_HyBooleanValue(ISerializationContext context, HyBooleanValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyConditionalFeatureReferenceExpression
	 *     HyImpliesExpression returns HyConditionalFeatureReferenceExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     HyEquivalenceExpression returns HyConditionalFeatureReferenceExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     HyAndExpression returns HyConditionalFeatureReferenceExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     HyOrExpression returns HyConditionalFeatureReferenceExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyConditionalFeatureReferenceExpression
	 *     TerminalExpression returns HyConditionalFeatureReferenceExpression
	 *     HyConditionalFeatureReferenceExpression returns HyConditionalFeatureReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|STRING] versionRestriction=HyVersionRestriction?)
	 */
	protected void sequence_HyConditionalFeatureReferenceExpression(ISerializationContext context, HyConditionalFeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyContextInformationReferenceExpression
	 *     HyAdditionExpression returns HyContextInformationReferenceExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     HySubtractionExpression returns HyContextInformationReferenceExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     HyMultiplicationExpression returns HyContextInformationReferenceExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyContextInformationReferenceExpression
	 *     HyDivisionExpression returns HyContextInformationReferenceExpression
	 *     HyDivisionExpression.HyDivisionExpression_1_0 returns HyContextInformationReferenceExpression
	 *     TerminalArithmeticalExpression returns HyContextInformationReferenceExpression
	 *     HyContextInformationReferenceExpression returns HyContextInformationReferenceExpression
	 *
	 * Constraint:
	 *     contextInformation=[HyContextualInformation|STRING]
	 */
	protected void sequence_HyContextInformationReferenceExpression(ISerializationContext context, HyContextInformationReferenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyContextInformationReferenceExpressionAccess().getContextInformationHyContextualInformationSTRINGTerminalRuleCall_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION__CONTEXT_INFORMATION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyDivisionExpression
	 *     HyAdditionExpression returns HyDivisionExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyDivisionExpression
	 *     HySubtractionExpression returns HyDivisionExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyDivisionExpression
	 *     HyMultiplicationExpression returns HyDivisionExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyDivisionExpression
	 *     HyDivisionExpression returns HyDivisionExpression
	 *     HyDivisionExpression.HyDivisionExpression_1_0 returns HyDivisionExpression
	 *
	 * Constraint:
	 *     (operand1=HyDivisionExpression_HyDivisionExpression_1_0 operand2=TerminalArithmeticalExpression)
	 */
	protected void sequence_HyDivisionExpression(ISerializationContext context, HyDivisionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyDivisionExpressionAccess().getOperand2TerminalArithmeticalExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyValue returns HyEnumValue
	 *     HyEnumValue returns HyEnumValue
	 *
	 * Constraint:
	 *     (enum=[HyEnum|STRING] enumLiteral=[HyEnumLiteral|STRING])
	 */
	protected void sequence_HyEnumValue(ISerializationContext context, HyEnumValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM));
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyEnumValueAccess().getEnumHyEnumSTRINGTerminalRuleCall_0_0_1(), semanticObject.eGet(HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM, false));
		feeder.accept(grammarAccess.getHyEnumValueAccess().getEnumLiteralHyEnumLiteralSTRINGTerminalRuleCall_2_0_1(), semanticObject.eGet(HyDataValuesPackage.Literals.HY_ENUM_VALUE__ENUM_LITERAL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyImpliesExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyBinaryArithmeticalComparisonExpression
	 *     HyEquivalenceExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyBinaryArithmeticalComparisonExpression
	 *     HyAndExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyBinaryArithmeticalComparisonExpression
	 *     HyOrExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyBinaryArithmeticalComparisonExpression
	 *     TerminalExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyArithmeticalComparisonExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyBinaryArithmeticalComparisonExpression returns HyBinaryArithmeticalComparisonExpression
	 *     HyGreaterExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 *     )
	 */
	protected void sequence_HyEqualExpression_HyGreaterExpression_HyGreaterOrEqualExpression_HyLessExpression_HyLessOrEqualExpression_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyLessExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 *     )
	 */
	protected void sequence_HyEqualExpression_HyGreaterOrEqualExpression_HyLessExpression_HyLessOrEqualExpression_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyGreaterOrEqualExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 *     )
	 */
	protected void sequence_HyEqualExpression_HyGreaterOrEqualExpression_HyLessOrEqualExpression_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyLessOrEqualExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 *     )
	 */
	protected void sequence_HyEqualExpression_HyLessOrEqualExpression_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyEqualExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression) | 
	 *         (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 *     )
	 */
	protected void sequence_HyEqualExpression_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyEquivalenceExpression
	 *     HyImpliesExpression returns HyEquivalenceExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyEquivalenceExpression
	 *     HyEquivalenceExpression returns HyEquivalenceExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyEquivalenceExpression
	 *
	 * Constraint:
	 *     (operand1=HyEquivalenceExpression_HyEquivalenceExpression_1_0 operand2=HyAndExpression)
	 */
	protected void sequence_HyEquivalenceExpression(ISerializationContext context, HyEquivalenceExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyEquivalenceExpressionAccess().getHyEquivalenceExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyEquivalenceExpressionAccess().getOperand2HyAndExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyFeatureReferenceExpression
	 *     HyImpliesExpression returns HyFeatureReferenceExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyFeatureReferenceExpression
	 *     HyEquivalenceExpression returns HyFeatureReferenceExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyFeatureReferenceExpression
	 *     HyAndExpression returns HyFeatureReferenceExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyFeatureReferenceExpression
	 *     HyOrExpression returns HyFeatureReferenceExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyFeatureReferenceExpression
	 *     TerminalExpression returns HyFeatureReferenceExpression
	 *     HyFeatureReferenceExpression returns HyFeatureReferenceExpression
	 *
	 * Constraint:
	 *     (feature=[HyFeature|STRING] versionRestriction=HyVersionRestriction?)
	 */
	protected void sequence_HyFeatureReferenceExpression(ISerializationContext context, HyFeatureReferenceExpression semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyImpliesExpression
	 *     HyImpliesExpression returns HyImpliesExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyImpliesExpression
	 *
	 * Constraint:
	 *     (operand1=HyImpliesExpression_HyImpliesExpression_1_0 operand2=HyEquivalenceExpression)
	 */
	protected void sequence_HyImpliesExpression(ISerializationContext context, HyImpliesExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyImpliesExpressionAccess().getHyImpliesExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyImpliesExpressionAccess().getOperand2HyEquivalenceExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyMultiplicationExpression
	 *     HyAdditionExpression returns HyMultiplicationExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyMultiplicationExpression
	 *     HySubtractionExpression returns HyMultiplicationExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyMultiplicationExpression
	 *     HyMultiplicationExpression returns HyMultiplicationExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyMultiplicationExpression
	 *
	 * Constraint:
	 *     (operand1=HyMultiplicationExpression_HyMultiplicationExpression_1_0 operand2=HyDivisionExpression)
	 */
	protected void sequence_HyMultiplicationExpression(ISerializationContext context, HyMultiplicationExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyMultiplicationExpressionAccess().getOperand2HyDivisionExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyNestedArithmeticalValueExpression
	 *     HyAdditionExpression returns HyNestedArithmeticalValueExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyNestedArithmeticalValueExpression
	 *     HySubtractionExpression returns HyNestedArithmeticalValueExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyNestedArithmeticalValueExpression
	 *     HyMultiplicationExpression returns HyNestedArithmeticalValueExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyNestedArithmeticalValueExpression
	 *     HyDivisionExpression returns HyNestedArithmeticalValueExpression
	 *     HyDivisionExpression.HyDivisionExpression_1_0 returns HyNestedArithmeticalValueExpression
	 *     TerminalArithmeticalExpression returns HyNestedArithmeticalValueExpression
	 *     HyNestedArithmeticalValueExpression returns HyNestedArithmeticalValueExpression
	 *
	 * Constraint:
	 *     operand=HyArithmeticalValueExpression
	 */
	protected void sequence_HyNestedArithmeticalValueExpression(ISerializationContext context, HyNestedArithmeticalValueExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_UNARY_OPERATION_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_UNARY_OPERATION_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyNestedArithmeticalValueExpressionAccess().getOperandHyArithmeticalValueExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyNestedExpression
	 *     HyImpliesExpression returns HyNestedExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyNestedExpression
	 *     HyEquivalenceExpression returns HyNestedExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyNestedExpression
	 *     HyAndExpression returns HyNestedExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyNestedExpression
	 *     HyOrExpression returns HyNestedExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyNestedExpression
	 *     TerminalExpression returns HyNestedExpression
	 *     HyNestedExpression returns HyNestedExpression
	 *
	 * Constraint:
	 *     operand=HyExpression
	 */
	protected void sequence_HyNestedExpression(ISerializationContext context, HyNestedExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyNestedExpressionAccess().getOperandHyExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyNotEqualExpression returns HyBinaryArithmeticalComparisonExpression
	 *
	 * Constraint:
	 *     (operand1=HyArithmeticalValueExpression operand2=HyArithmeticalValueExpression)
	 */
	protected void sequence_HyNotEqualExpression(ISerializationContext context, HyBinaryArithmeticalComparisonExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_ARITHMETICAL_COMPARISON_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_ARITHMETICAL_COMPARISON_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_ARITHMETICAL_COMPARISON_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_ARITHMETICAL_COMPARISON_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyNotEqualExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyNotEqualExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyNotExpression
	 *     HyImpliesExpression returns HyNotExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyNotExpression
	 *     HyEquivalenceExpression returns HyNotExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyNotExpression
	 *     HyAndExpression returns HyNotExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyNotExpression
	 *     HyOrExpression returns HyNotExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyNotExpression
	 *     TerminalExpression returns HyNotExpression
	 *     HyNotExpression returns HyNotExpression
	 *
	 * Constraint:
	 *     operand=TerminalExpression
	 */
	protected void sequence_HyNotExpression(ISerializationContext context, HyNotExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_UNARY_EXPRESSION__OPERAND));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyNotExpressionAccess().getOperandTerminalExpressionParserRuleCall_1_0(), semanticObject.getOperand());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyValue returns HyNumberValue
	 *     HyNumberValue returns HyNumberValue
	 *
	 * Constraint:
	 *     value=EInt
	 */
	protected void sequence_HyNumberValue(ISerializationContext context, HyNumberValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_NUMBER_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyNumberValueAccess().getValueEIntParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyExpression returns HyOrExpression
	 *     HyImpliesExpression returns HyOrExpression
	 *     HyImpliesExpression.HyImpliesExpression_1_0 returns HyOrExpression
	 *     HyEquivalenceExpression returns HyOrExpression
	 *     HyEquivalenceExpression.HyEquivalenceExpression_1_0 returns HyOrExpression
	 *     HyAndExpression returns HyOrExpression
	 *     HyAndExpression.HyAndExpression_1_0 returns HyOrExpression
	 *     HyOrExpression returns HyOrExpression
	 *     HyOrExpression.HyOrExpression_1_0 returns HyOrExpression
	 *
	 * Constraint:
	 *     (operand1=HyOrExpression_HyOrExpression_1_0 operand2=TerminalExpression)
	 */
	protected void sequence_HyOrExpression(ISerializationContext context, HyOrExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_BINARY_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyOrExpressionAccess().getHyOrExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHyOrExpressionAccess().getOperand2TerminalExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyVersionRestriction returns HyRelativeVersionRestriction
	 *     HyRelativeVersionRestriction returns HyRelativeVersionRestriction
	 *
	 * Constraint:
	 *     (operator=HyRelativeVersionRestrictionOperator version=[HyVersion|ID])
	 */
	protected void sequence_HyRelativeVersionRestriction(ISerializationContext context, HyRelativeVersionRestriction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__OPERATOR));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyRelativeVersionRestrictionAccess().getOperatorHyRelativeVersionRestrictionOperatorEnumRuleCall_1_0(), semanticObject.getOperator());
		feeder.accept(grammarAccess.getHyRelativeVersionRestrictionAccess().getVersionHyVersionIDTerminalRuleCall_2_0_1(), semanticObject.eGet(HyExpressionPackage.Literals.HY_RELATIVE_VERSION_RESTRICTION__VERSION, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyValue returns HyStringValue
	 *     HyStringValue returns HyStringValue
	 *
	 * Constraint:
	 *     value=STRING
	 */
	protected void sequence_HyStringValue(ISerializationContext context, HyStringValue semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyDataValuesPackage.Literals.HY_STRING_VALUE__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyDataValuesPackage.Literals.HY_STRING_VALUE__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyStringValueAccess().getValueSTRINGTerminalRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HySubtractionExpression
	 *     HyAdditionExpression returns HySubtractionExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HySubtractionExpression
	 *     HySubtractionExpression returns HySubtractionExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HySubtractionExpression
	 *
	 * Constraint:
	 *     (operand1=HySubtractionExpression_HySubtractionExpression_1_0 operand2=HyMultiplicationExpression)
	 */
	protected void sequence_HySubtractionExpression(ISerializationContext context, HySubtractionExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND1));
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_ARITHMETICAL_VALUE_BINARY_OPERATION_EXPRESSION__OPERAND2));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHySubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0(), semanticObject.getOperand1());
		feeder.accept(grammarAccess.getHySubtractionExpressionAccess().getOperand2HyMultiplicationExpressionParserRuleCall_1_2_0(), semanticObject.getOperand2());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyArithmeticalValueExpression returns HyValueExpression
	 *     HyAdditionExpression returns HyValueExpression
	 *     HyAdditionExpression.HyAdditionExpression_1_0 returns HyValueExpression
	 *     HySubtractionExpression returns HyValueExpression
	 *     HySubtractionExpression.HySubtractionExpression_1_0 returns HyValueExpression
	 *     HyMultiplicationExpression returns HyValueExpression
	 *     HyMultiplicationExpression.HyMultiplicationExpression_1_0 returns HyValueExpression
	 *     HyDivisionExpression returns HyValueExpression
	 *     HyDivisionExpression.HyDivisionExpression_1_0 returns HyValueExpression
	 *     TerminalArithmeticalExpression returns HyValueExpression
	 *     HyValueExpression returns HyValueExpression
	 *
	 * Constraint:
	 *     value=HyValue
	 */
	protected void sequence_HyValueExpression(ISerializationContext context, HyValueExpression semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyExpressionPackage.Literals.HY_VALUE_EXPRESSION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyValueExpressionAccess().getValueHyValueParserRuleCall_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HyVersionRestriction returns HyVersionRangeRestriction
	 *     HyVersionRangeRestriction returns HyVersionRangeRestriction
	 *
	 * Constraint:
	 *     (lowerIncluded?='true' | (lowerVersion=[HyVersion|STRING] upperIncluded?='true') | upperVersion=[HyVersion|STRING])
	 */
	protected void sequence_HyVersionRangeRestriction(ISerializationContext context, HyVersionRangeRestriction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
