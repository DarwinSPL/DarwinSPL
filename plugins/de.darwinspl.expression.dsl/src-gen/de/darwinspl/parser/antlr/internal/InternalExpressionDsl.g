/*
 * generated by Xtext 2.12.0
 */
grammar InternalExpressionDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package de.darwinspl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package de.darwinspl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import de.darwinspl.services.ExpressionDslGrammarAccess;

}

@parser::members {

 	private ExpressionDslGrammarAccess grammarAccess;

    public InternalExpressionDslParser(TokenStream input, ExpressionDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "HyExpression";
   	}

   	@Override
   	protected ExpressionDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleHyExpression
entryRuleHyExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyExpressionRule()); }
	iv_ruleHyExpression=ruleHyExpression
	{ $current=$iv_ruleHyExpression.current; }
	EOF;

// Rule HyExpression
ruleHyExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getHyExpressionAccess().getHyImpliesExpressionParserRuleCall());
	}
	this_HyImpliesExpression_0=ruleHyImpliesExpression
	{
		$current = $this_HyImpliesExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHyImpliesExpression
entryRuleHyImpliesExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyImpliesExpressionRule()); }
	iv_ruleHyImpliesExpression=ruleHyImpliesExpression
	{ $current=$iv_ruleHyImpliesExpression.current; }
	EOF;

// Rule HyImpliesExpression
ruleHyImpliesExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyImpliesExpressionAccess().getHyEquivalenceExpressionParserRuleCall_0());
		}
		this_HyEquivalenceExpression_0=ruleHyEquivalenceExpression
		{
			$current = $this_HyEquivalenceExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyImpliesExpressionAccess().getHyImpliesExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='->'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyImpliesExpressionAccess().getHyphenMinusGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyImpliesExpressionAccess().getOperand2HyEquivalenceExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHyEquivalenceExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyImpliesExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HyEquivalenceExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHyEquivalenceExpression
entryRuleHyEquivalenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyEquivalenceExpressionRule()); }
	iv_ruleHyEquivalenceExpression=ruleHyEquivalenceExpression
	{ $current=$iv_ruleHyEquivalenceExpression.current; }
	EOF;

// Rule HyEquivalenceExpression
ruleHyEquivalenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyEquivalenceExpressionAccess().getHyAndExpressionParserRuleCall_0());
		}
		this_HyAndExpression_0=ruleHyAndExpression
		{
			$current = $this_HyAndExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyEquivalenceExpressionAccess().getHyEquivalenceExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='<->'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyEquivalenceExpressionAccess().getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyEquivalenceExpressionAccess().getOperand2HyAndExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHyAndExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyEquivalenceExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HyAndExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHyAndExpression
entryRuleHyAndExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyAndExpressionRule()); }
	iv_ruleHyAndExpression=ruleHyAndExpression
	{ $current=$iv_ruleHyAndExpression.current; }
	EOF;

// Rule HyAndExpression
ruleHyAndExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyAndExpressionAccess().getHyOrExpressionParserRuleCall_0());
		}
		this_HyOrExpression_0=ruleHyOrExpression
		{
			$current = $this_HyOrExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyAndExpressionAccess().getHyAndExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='&&'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyAndExpressionAccess().getAmpersandAmpersandKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyAndExpressionAccess().getOperand2HyOrExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHyOrExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyAndExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HyOrExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHyOrExpression
entryRuleHyOrExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyOrExpressionRule()); }
	iv_ruleHyOrExpression=ruleHyOrExpression
	{ $current=$iv_ruleHyOrExpression.current; }
	EOF;

// Rule HyOrExpression
ruleHyOrExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyOrExpressionAccess().getTerminalExpressionParserRuleCall_0());
		}
		this_TerminalExpression_0=ruleTerminalExpression
		{
			$current = $this_TerminalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyOrExpressionAccess().getHyOrExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='||'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyOrExpressionAccess().getVerticalLineVerticalLineKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyOrExpressionAccess().getOperand2TerminalExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleTerminalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyOrExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.TerminalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(ruleHyArithmeticalComparisonExpression)=>
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyArithmeticalComparisonExpressionParserRuleCall_0());
			}
			this_HyArithmeticalComparisonExpression_0=ruleHyArithmeticalComparisonExpression
			{
				$current = $this_HyArithmeticalComparisonExpression_0.current;
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyFeatureReferenceExpressionParserRuleCall_1());
		}
		this_HyFeatureReferenceExpression_1=ruleHyFeatureReferenceExpression
		{
			$current = $this_HyFeatureReferenceExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyNestedExpressionParserRuleCall_2());
		}
		this_HyNestedExpression_2=ruleHyNestedExpression
		{
			$current = $this_HyNestedExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyConditionalFeatureReferenceExpressionParserRuleCall_3());
		}
		this_HyConditionalFeatureReferenceExpression_3=ruleHyConditionalFeatureReferenceExpression
		{
			$current = $this_HyConditionalFeatureReferenceExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyNotExpressionParserRuleCall_4());
		}
		this_HyNotExpression_4=ruleHyNotExpression
		{
			$current = $this_HyNotExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getTerminalExpressionAccess().getHyBooleanValueExpressionParserRuleCall_5());
		}
		this_HyBooleanValueExpression_5=ruleHyBooleanValueExpression
		{
			$current = $this_HyBooleanValueExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHyNestedExpression
entryRuleHyNestedExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyNestedExpressionRule()); }
	iv_ruleHyNestedExpression=ruleHyNestedExpression
	{ $current=$iv_ruleHyNestedExpression.current; }
	EOF;

// Rule HyNestedExpression
ruleHyNestedExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getHyNestedExpressionAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyNestedExpressionAccess().getOperandHyExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleHyExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyNestedExpressionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"de.darwinspl.ExpressionDsl.HyExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2=')'
		{
			newLeafNode(otherlv_2, grammarAccess.getHyNestedExpressionAccess().getRightParenthesisKeyword_2());
		}
	)
;

// Entry rule entryRuleHyNotExpression
entryRuleHyNotExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyNotExpressionRule()); }
	iv_ruleHyNotExpression=ruleHyNotExpression
	{ $current=$iv_ruleHyNotExpression.current; }
	EOF;

// Rule HyNotExpression
ruleHyNotExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='!'
		{
			newLeafNode(otherlv_0, grammarAccess.getHyNotExpressionAccess().getExclamationMarkKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyNotExpressionAccess().getOperandTerminalExpressionParserRuleCall_1_0());
				}
				lv_operand_1_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyNotExpressionRule());
					}
					set(
						$current,
						"operand",
						lv_operand_1_0,
						"de.darwinspl.ExpressionDsl.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyFeatureReferenceExpression
entryRuleHyFeatureReferenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyFeatureReferenceExpressionRule()); }
	iv_ruleHyFeatureReferenceExpression=ruleHyFeatureReferenceExpression
	{ $current=$iv_ruleHyFeatureReferenceExpression.current; }
	EOF;

// Rule HyFeatureReferenceExpression
ruleHyFeatureReferenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHyFeatureReferenceExpressionRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getHyFeatureReferenceExpressionAccess().getFeatureHyFeatureCrossReference_0_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHyFeatureReferenceExpressionAccess().getVersionRestrictionHyVersionRestrictionParserRuleCall_1_0());
				}
				lv_versionRestriction_1_0=ruleHyVersionRestriction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyFeatureReferenceExpressionRule());
					}
					set(
						$current,
						"versionRestriction",
						lv_versionRestriction_1_0,
						"de.darwinspl.ExpressionDsl.HyVersionRestriction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleHyConditionalFeatureReferenceExpression
entryRuleHyConditionalFeatureReferenceExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyConditionalFeatureReferenceExpressionRule()); }
	iv_ruleHyConditionalFeatureReferenceExpression=ruleHyConditionalFeatureReferenceExpression
	{ $current=$iv_ruleHyConditionalFeatureReferenceExpression.current; }
	EOF;

// Rule HyConditionalFeatureReferenceExpression
ruleHyConditionalFeatureReferenceExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='?'
		{
			newLeafNode(otherlv_0, grammarAccess.getHyConditionalFeatureReferenceExpressionAccess().getQuestionMarkKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHyConditionalFeatureReferenceExpressionRule());
					}
				}
				otherlv_1=RULE_STRING
				{
					newLeafNode(otherlv_1, grammarAccess.getHyConditionalFeatureReferenceExpressionAccess().getFeatureHyFeatureCrossReference_1_0());
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getHyConditionalFeatureReferenceExpressionAccess().getVersionRestrictionHyVersionRestrictionParserRuleCall_2_0());
				}
				lv_versionRestriction_2_0=ruleHyVersionRestriction
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyConditionalFeatureReferenceExpressionRule());
					}
					set(
						$current,
						"versionRestriction",
						lv_versionRestriction_2_0,
						"de.darwinspl.ExpressionDsl.HyVersionRestriction");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleHyVersionRestriction
entryRuleHyVersionRestriction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyVersionRestrictionRule()); }
	iv_ruleHyVersionRestriction=ruleHyVersionRestriction
	{ $current=$iv_ruleHyVersionRestriction.current; }
	EOF;

// Rule HyVersionRestriction
ruleHyVersionRestriction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyVersionRestrictionAccess().getHyRelativeVersionRestrictionParserRuleCall_0());
		}
		this_HyRelativeVersionRestriction_0=ruleHyRelativeVersionRestriction
		{
			$current = $this_HyRelativeVersionRestriction_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyVersionRestrictionAccess().getHyVersionRangeRestrictionParserRuleCall_1());
		}
		this_HyVersionRangeRestriction_1=ruleHyVersionRangeRestriction
		{
			$current = $this_HyVersionRangeRestriction_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHyRelativeVersionRestriction
entryRuleHyRelativeVersionRestriction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyRelativeVersionRestrictionRule()); }
	iv_ruleHyRelativeVersionRestriction=ruleHyRelativeVersionRestriction
	{ $current=$iv_ruleHyRelativeVersionRestriction.current; }
	EOF;

// Rule HyRelativeVersionRestriction
ruleHyRelativeVersionRestriction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='['
		{
			newLeafNode(otherlv_0, grammarAccess.getHyRelativeVersionRestrictionAccess().getLeftSquareBracketKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyRelativeVersionRestrictionAccess().getOperatorHyRelativeVersionRestrictionOperatorEnumRuleCall_1_0());
				}
				lv_operator_1_0=ruleHyRelativeVersionRestrictionOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyRelativeVersionRestrictionRule());
					}
					set(
						$current,
						"operator",
						lv_operator_1_0,
						"de.darwinspl.ExpressionDsl.HyRelativeVersionRestrictionOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHyRelativeVersionRestrictionRule());
					}
				}
				otherlv_2=RULE_ID
				{
					newLeafNode(otherlv_2, grammarAccess.getHyRelativeVersionRestrictionAccess().getVersionHyVersionCrossReference_2_0());
				}
			)
		)
		otherlv_3=']'
		{
			newLeafNode(otherlv_3, grammarAccess.getHyRelativeVersionRestrictionAccess().getRightSquareBracketKeyword_3());
		}
	)
;

// Entry rule entryRuleHyVersionRangeRestriction
entryRuleHyVersionRangeRestriction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyVersionRangeRestrictionRule()); }
	iv_ruleHyVersionRangeRestriction=ruleHyVersionRangeRestriction
	{ $current=$iv_ruleHyVersionRangeRestriction.current; }
	EOF;

// Rule HyVersionRangeRestriction
ruleHyVersionRangeRestriction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='['
			{
				newLeafNode(otherlv_0, grammarAccess.getHyVersionRangeRestrictionAccess().getLeftSquareBracketKeyword_0_0());
			}
			(
				(
					lv_lowerIncluded_1_0='true'
					{
						newLeafNode(lv_lowerIncluded_1_0, grammarAccess.getHyVersionRangeRestrictionAccess().getLowerIncludedTrueKeyword_0_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyVersionRangeRestrictionRule());
						}
						setWithLastConsumed($current, "lowerIncluded", true, "true");
					}
				)
			)
		)
		    |
		(
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyVersionRangeRestrictionAccess().getFalseKeyword_1_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyVersionRangeRestrictionRule());
						}
					}
					otherlv_3=RULE_STRING
					{
						newLeafNode(otherlv_3, grammarAccess.getHyVersionRangeRestrictionAccess().getLowerVersionHyVersionCrossReference_1_1_0());
					}
				)
			)
			otherlv_4='-'
			{
				newLeafNode(otherlv_4, grammarAccess.getHyVersionRangeRestrictionAccess().getHyphenMinusKeyword_1_2());
			}
			(
				(
					lv_upperIncluded_5_0='true'
					{
						newLeafNode(lv_upperIncluded_5_0, grammarAccess.getHyVersionRangeRestrictionAccess().getUpperIncludedTrueKeyword_1_3_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyVersionRangeRestrictionRule());
						}
						setWithLastConsumed($current, "upperIncluded", true, "true");
					}
				)
			)
		)
		    |
		(
			otherlv_6='false'
			{
				newLeafNode(otherlv_6, grammarAccess.getHyVersionRangeRestrictionAccess().getFalseKeyword_2_0());
			}
			(
				(
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyVersionRangeRestrictionRule());
						}
					}
					otherlv_7=RULE_STRING
					{
						newLeafNode(otherlv_7, grammarAccess.getHyVersionRangeRestrictionAccess().getUpperVersionHyVersionCrossReference_2_1_0());
					}
				)
			)
			otherlv_8=']'
			{
				newLeafNode(otherlv_8, grammarAccess.getHyVersionRangeRestrictionAccess().getRightSquareBracketKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleHyBooleanValueExpression
entryRuleHyBooleanValueExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyBooleanValueExpressionRule()); }
	iv_ruleHyBooleanValueExpression=ruleHyBooleanValueExpression
	{ $current=$iv_ruleHyBooleanValueExpression.current; }
	EOF;

// Rule HyBooleanValueExpression
ruleHyBooleanValueExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHyBooleanValueExpressionAccess().getHyBooleanValueExpressionAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0='true'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getHyBooleanValueExpressionAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyBooleanValueExpressionRule());
						}
						setWithLastConsumed($current, "value", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyBooleanValueExpressionAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleHyArithmeticalComparisonExpression
entryRuleHyArithmeticalComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyArithmeticalComparisonExpressionRule()); }
	iv_ruleHyArithmeticalComparisonExpression=ruleHyArithmeticalComparisonExpression
	{ $current=$iv_ruleHyArithmeticalComparisonExpression.current; }
	EOF;

// Rule HyArithmeticalComparisonExpression
ruleHyArithmeticalComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getHyArithmeticalComparisonExpressionAccess().getHyBinaryArithmeticalComparisonExpressionParserRuleCall());
	}
	this_HyBinaryArithmeticalComparisonExpression_0=ruleHyBinaryArithmeticalComparisonExpression
	{
		$current = $this_HyBinaryArithmeticalComparisonExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHyBinaryArithmeticalComparisonExpression
entryRuleHyBinaryArithmeticalComparisonExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionRule()); }
	iv_ruleHyBinaryArithmeticalComparisonExpression=ruleHyBinaryArithmeticalComparisonExpression
	{ $current=$iv_ruleHyBinaryArithmeticalComparisonExpression.current; }
	EOF;

// Rule HyBinaryArithmeticalComparisonExpression
ruleHyBinaryArithmeticalComparisonExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyGreaterOrEqualExpressionParserRuleCall_0());
		}
		this_HyGreaterOrEqualExpression_0=ruleHyGreaterOrEqualExpression
		{
			$current = $this_HyGreaterOrEqualExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyGreaterExpressionParserRuleCall_1());
		}
		this_HyGreaterExpression_1=ruleHyGreaterExpression
		{
			$current = $this_HyGreaterExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyLessOrEqualExpressionParserRuleCall_2());
		}
		this_HyLessOrEqualExpression_2=ruleHyLessOrEqualExpression
		{
			$current = $this_HyLessOrEqualExpression_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyLessExpressionParserRuleCall_3());
		}
		this_HyLessExpression_3=ruleHyLessExpression
		{
			$current = $this_HyLessExpression_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyNotEqualExpressionParserRuleCall_4());
		}
		this_HyNotEqualExpression_4=ruleHyNotEqualExpression
		{
			$current = $this_HyNotEqualExpression_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyBinaryArithmeticalComparisonExpressionAccess().getHyEqualExpressionParserRuleCall_5());
		}
		this_HyEqualExpression_5=ruleHyEqualExpression
		{
			$current = $this_HyEqualExpression_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHyGreaterExpression
entryRuleHyGreaterExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyGreaterExpressionRule()); }
	iv_ruleHyGreaterExpression=ruleHyGreaterExpression
	{ $current=$iv_ruleHyGreaterExpression.current; }
	EOF;

// Rule HyGreaterExpression
ruleHyGreaterExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyGreaterExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyGreaterExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='>'
		{
			newLeafNode(otherlv_1, grammarAccess.getHyGreaterExpressionAccess().getGreaterThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyGreaterExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyGreaterExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyLessExpression
entryRuleHyLessExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyLessExpressionRule()); }
	iv_ruleHyLessExpression=ruleHyLessExpression
	{ $current=$iv_ruleHyLessExpression.current; }
	EOF;

// Rule HyLessExpression
ruleHyLessExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyLessExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyLessExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<'
		{
			newLeafNode(otherlv_1, grammarAccess.getHyLessExpressionAccess().getLessThanSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyLessExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyLessExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyGreaterOrEqualExpression
entryRuleHyGreaterOrEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyGreaterOrEqualExpressionRule()); }
	iv_ruleHyGreaterOrEqualExpression=ruleHyGreaterOrEqualExpression
	{ $current=$iv_ruleHyGreaterOrEqualExpression.current; }
	EOF;

// Rule HyGreaterOrEqualExpression
ruleHyGreaterOrEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyGreaterOrEqualExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyGreaterOrEqualExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='>='
		{
			newLeafNode(otherlv_1, grammarAccess.getHyGreaterOrEqualExpressionAccess().getGreaterThanSignEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyGreaterOrEqualExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyGreaterOrEqualExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyLessOrEqualExpression
entryRuleHyLessOrEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyLessOrEqualExpressionRule()); }
	iv_ruleHyLessOrEqualExpression=ruleHyLessOrEqualExpression
	{ $current=$iv_ruleHyLessOrEqualExpression.current; }
	EOF;

// Rule HyLessOrEqualExpression
ruleHyLessOrEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyLessOrEqualExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyLessOrEqualExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='<='
		{
			newLeafNode(otherlv_1, grammarAccess.getHyLessOrEqualExpressionAccess().getLessThanSignEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyLessOrEqualExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyLessOrEqualExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyEqualExpression
entryRuleHyEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyEqualExpressionRule()); }
	iv_ruleHyEqualExpression=ruleHyEqualExpression
	{ $current=$iv_ruleHyEqualExpression.current; }
	EOF;

// Rule HyEqualExpression
ruleHyEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyEqualExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyEqualExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='='
		{
			newLeafNode(otherlv_1, grammarAccess.getHyEqualExpressionAccess().getEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyEqualExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyEqualExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyNotEqualExpression
entryRuleHyNotEqualExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyNotEqualExpressionRule()); }
	iv_ruleHyNotEqualExpression=ruleHyNotEqualExpression
	{ $current=$iv_ruleHyNotEqualExpression.current; }
	EOF;

// Rule HyNotEqualExpression
ruleHyNotEqualExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getHyNotEqualExpressionAccess().getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0());
				}
				lv_operand1_0_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyNotEqualExpressionRule());
					}
					set(
						$current,
						"operand1",
						lv_operand1_0_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='!='
		{
			newLeafNode(otherlv_1, grammarAccess.getHyNotEqualExpressionAccess().getExclamationMarkEqualsSignKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHyNotEqualExpressionAccess().getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0());
				}
				lv_operand2_2_0=ruleHyArithmeticalValueExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHyNotEqualExpressionRule());
					}
					set(
						$current,
						"operand2",
						lv_operand2_2_0,
						"de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleHyArithmeticalValueExpression
entryRuleHyArithmeticalValueExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyArithmeticalValueExpressionRule()); }
	iv_ruleHyArithmeticalValueExpression=ruleHyArithmeticalValueExpression
	{ $current=$iv_ruleHyArithmeticalValueExpression.current; }
	EOF;

// Rule HyArithmeticalValueExpression
ruleHyArithmeticalValueExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getHyArithmeticalValueExpressionAccess().getHyAdditionExpressionParserRuleCall());
	}
	this_HyAdditionExpression_0=ruleHyAdditionExpression
	{
		$current = $this_HyAdditionExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHyAdditionExpression
entryRuleHyAdditionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyAdditionExpressionRule()); }
	iv_ruleHyAdditionExpression=ruleHyAdditionExpression
	{ $current=$iv_ruleHyAdditionExpression.current; }
	EOF;

// Rule HyAdditionExpression
ruleHyAdditionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyAdditionExpressionAccess().getHySubtractionExpressionParserRuleCall_0());
		}
		this_HySubtractionExpression_0=ruleHySubtractionExpression
		{
			$current = $this_HySubtractionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyAdditionExpressionAccess().getHyAdditionExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='+'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyAdditionExpressionAccess().getPlusSignKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyAdditionExpressionAccess().getOperand2HySubtractionExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHySubtractionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyAdditionExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HySubtractionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHySubtractionExpression
entryRuleHySubtractionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHySubtractionExpressionRule()); }
	iv_ruleHySubtractionExpression=ruleHySubtractionExpression
	{ $current=$iv_ruleHySubtractionExpression.current; }
	EOF;

// Rule HySubtractionExpression
ruleHySubtractionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHySubtractionExpressionAccess().getHyMultiplicationExpressionParserRuleCall_0());
		}
		this_HyMultiplicationExpression_0=ruleHyMultiplicationExpression
		{
			$current = $this_HyMultiplicationExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHySubtractionExpressionAccess().getHySubtractionExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='-'
			{
				newLeafNode(otherlv_2, grammarAccess.getHySubtractionExpressionAccess().getHyphenMinusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHySubtractionExpressionAccess().getOperand2HyMultiplicationExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHyMultiplicationExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHySubtractionExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HyMultiplicationExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHyMultiplicationExpression
entryRuleHyMultiplicationExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyMultiplicationExpressionRule()); }
	iv_ruleHyMultiplicationExpression=ruleHyMultiplicationExpression
	{ $current=$iv_ruleHyMultiplicationExpression.current; }
	EOF;

// Rule HyMultiplicationExpression
ruleHyMultiplicationExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyMultiplicationExpressionAccess().getHyDivisionExpressionParserRuleCall_0());
		}
		this_HyDivisionExpression_0=ruleHyDivisionExpression
		{
			$current = $this_HyDivisionExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyMultiplicationExpressionAccess().getHyMultiplicationExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='*'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyMultiplicationExpressionAccess().getAsteriskKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyMultiplicationExpressionAccess().getOperand2HyDivisionExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleHyDivisionExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyMultiplicationExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.HyDivisionExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleHyDivisionExpression
entryRuleHyDivisionExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyDivisionExpressionRule()); }
	iv_ruleHyDivisionExpression=ruleHyDivisionExpression
	{ $current=$iv_ruleHyDivisionExpression.current; }
	EOF;

// Rule HyDivisionExpression
ruleHyDivisionExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyDivisionExpressionAccess().getTerminalArithmeticalExpressionParserRuleCall_0());
		}
		this_TerminalArithmeticalExpression_0=ruleTerminalArithmeticalExpression
		{
			$current = $this_TerminalArithmeticalExpression_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getHyDivisionExpressionAccess().getHyDivisionExpressionOperand1Action_1_0(),
						$current);
				}
			)
			otherlv_2='/'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyDivisionExpressionAccess().getSolidusKeyword_1_1());
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getHyDivisionExpressionAccess().getOperand2TerminalArithmeticalExpressionParserRuleCall_1_2_0());
					}
					lv_operand2_3_0=ruleTerminalArithmeticalExpression
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getHyDivisionExpressionRule());
						}
						set(
							$current,
							"operand2",
							lv_operand2_3_0,
							"de.darwinspl.ExpressionDsl.TerminalArithmeticalExpression");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleTerminalArithmeticalExpression
entryRuleTerminalArithmeticalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalArithmeticalExpressionRule()); }
	iv_ruleTerminalArithmeticalExpression=ruleTerminalArithmeticalExpression
	{ $current=$iv_ruleTerminalArithmeticalExpression.current; }
	EOF;

// Rule TerminalArithmeticalExpression
ruleTerminalArithmeticalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	{
		newCompositeNode(grammarAccess.getTerminalArithmeticalExpressionAccess().getHyValueExpressionParserRuleCall());
	}
	this_HyValueExpression_0=ruleHyValueExpression
	{
		$current = $this_HyValueExpression_0.current;
		afterParserOrEnumRuleCall();
	}
;

// Entry rule entryRuleHyValueExpression
entryRuleHyValueExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyValueExpressionRule()); }
	iv_ruleHyValueExpression=ruleHyValueExpression
	{ $current=$iv_ruleHyValueExpression.current; }
	EOF;

// Rule HyValueExpression
ruleHyValueExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getHyValueExpressionAccess().getValueHyValueParserRuleCall_0());
			}
			lv_value_0_0=ruleHyValue
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getHyValueExpressionRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"de.darwinspl.ExpressionDsl.HyValue");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleHyValue
entryRuleHyValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyValueRule()); }
	iv_ruleHyValue=ruleHyValue
	{ $current=$iv_ruleHyValue.current; }
	EOF;

// Rule HyValue
ruleHyValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getHyValueAccess().getHyNumberValueParserRuleCall_0());
		}
		this_HyNumberValue_0=ruleHyNumberValue
		{
			$current = $this_HyNumberValue_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyValueAccess().getHyStringValueParserRuleCall_1());
		}
		this_HyStringValue_1=ruleHyStringValue
		{
			$current = $this_HyStringValue_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyValueAccess().getHyBooleanValueParserRuleCall_2());
		}
		this_HyBooleanValue_2=ruleHyBooleanValue
		{
			$current = $this_HyBooleanValue_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getHyValueAccess().getHyEnumValueParserRuleCall_3());
		}
		this_HyEnumValue_3=ruleHyEnumValue
		{
			$current = $this_HyEnumValue_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleHyNumberValue
entryRuleHyNumberValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyNumberValueRule()); }
	iv_ruleHyNumberValue=ruleHyNumberValue
	{ $current=$iv_ruleHyNumberValue.current; }
	EOF;

// Rule HyNumberValue
ruleHyNumberValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getHyNumberValueAccess().getValueEIntParserRuleCall_0());
			}
			lv_value_0_0=ruleEInt
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getHyNumberValueRule());
				}
				set(
					$current,
					"value",
					lv_value_0_0,
					"de.darwinspl.ExpressionDsl.EInt");
				afterParserOrEnumRuleCall();
			}
		)
	)
;

// Entry rule entryRuleHyStringValue
entryRuleHyStringValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyStringValueRule()); }
	iv_ruleHyStringValue=ruleHyStringValue
	{ $current=$iv_ruleHyStringValue.current; }
	EOF;

// Rule HyStringValue
ruleHyStringValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_value_0_0=RULE_STRING
			{
				newLeafNode(lv_value_0_0, grammarAccess.getHyStringValueAccess().getValueSTRINGTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getHyStringValueRule());
				}
				setWithLastConsumed(
					$current,
					"value",
					lv_value_0_0,
					"org.eclipse.xtext.common.Terminals.STRING");
			}
		)
	)
;

// Entry rule entryRuleHyBooleanValue
entryRuleHyBooleanValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyBooleanValueRule()); }
	iv_ruleHyBooleanValue=ruleHyBooleanValue
	{ $current=$iv_ruleHyBooleanValue.current; }
	EOF;

// Rule HyBooleanValue
ruleHyBooleanValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getHyBooleanValueAccess().getHyBooleanValueAction_0(),
					$current);
			}
		)
		(
			(
				(
					lv_value_1_0='true'
					{
						newLeafNode(lv_value_1_0, grammarAccess.getHyBooleanValueAccess().getValueTrueKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getHyBooleanValueRule());
						}
						setWithLastConsumed($current, "value", true, "true");
					}
				)
			)
			    |
			otherlv_2='false'
			{
				newLeafNode(otherlv_2, grammarAccess.getHyBooleanValueAccess().getFalseKeyword_1_1());
			}
		)
	)
;

// Entry rule entryRuleHyEnumValue
entryRuleHyEnumValue returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHyEnumValueRule()); }
	iv_ruleHyEnumValue=ruleHyEnumValue
	{ $current=$iv_ruleHyEnumValue.current; }
	EOF;

// Rule HyEnumValue
ruleHyEnumValue returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHyEnumValueRule());
					}
				}
				otherlv_0=RULE_STRING
				{
					newLeafNode(otherlv_0, grammarAccess.getHyEnumValueAccess().getEnumHyEnumCrossReference_0_0());
				}
			)
		)
		otherlv_1='.'
		{
			newLeafNode(otherlv_1, grammarAccess.getHyEnumValueAccess().getFullStopKeyword_1());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getHyEnumValueRule());
					}
				}
				otherlv_2=RULE_STRING
				{
					newLeafNode(otherlv_2, grammarAccess.getHyEnumValueAccess().getEnumLiteralHyEnumLiteralCrossReference_2_0());
				}
			)
		)
	)
;

// Entry rule entryRuleEInt
entryRuleEInt returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEIntRule()); }
	iv_ruleEInt=ruleEInt
	{ $current=$iv_ruleEInt.current.getText(); }
	EOF;

// Rule EInt
ruleEInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='-'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getEIntAccess().getHyphenMinusKeyword_0());
			}
		)?
		this_INT_1=RULE_INT
		{
			$current.merge(this_INT_1);
		}
		{
			newLeafNode(this_INT_1, grammarAccess.getEIntAccess().getINTTerminalRuleCall_1());
		}
	)
;

// Rule HyRelativeVersionRestrictionOperator
ruleHyRelativeVersionRestrictionOperator returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='<'
			{
				$current = grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getLessThanEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getLessThanEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='<='
			{
				$current = grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getLessThanOrEqualEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='='
			{
				$current = grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getEqualEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getEqualEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='>='
			{
				$current = grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getGreaterThanOrEqualEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getGreaterThanOrEqualEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='>'
			{
				$current = grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getGreaterThanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getHyRelativeVersionRestrictionOperatorAccess().getGreaterThanEnumLiteralDeclaration_4());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
