/*
 * generated by Xtext 2.12.0
 */
package de.darwinspl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractEnumRuleElementFinder;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class ExpressionDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class HyExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyExpression");
		private final RuleCall cHyAndExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HyExpression:
		//	HyAndExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyAndExpression
		public RuleCall getHyAndExpressionParserRuleCall() { return cHyAndExpressionParserRuleCall; }
	}
	public class HyAndExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyAndExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHyOrExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyAndExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAmpersandAmpersandKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HyOrExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyAndExpression HyExpression:
		//	HyOrExpression ({HyAndExpression.operand1=current} '&&' operand2=HyOrExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HyOrExpression ({HyAndExpression.operand1=current} '&&' operand2=HyOrExpression)*
		public Group getGroup() { return cGroup; }
		
		//HyOrExpression
		public RuleCall getHyOrExpressionParserRuleCall_0() { return cHyOrExpressionParserRuleCall_0; }
		
		//({HyAndExpression.operand1=current} '&&' operand2=HyOrExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyAndExpression.operand1=current}
		public Action getHyAndExpressionOperand1Action_1_0() { return cHyAndExpressionOperand1Action_1_0; }
		
		//'&&'
		public Keyword getAmpersandAmpersandKeyword_1_1() { return cAmpersandAmpersandKeyword_1_1; }
		
		//operand2=HyOrExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HyOrExpression
		public RuleCall getOperand2HyOrExpressionParserRuleCall_1_2_0() { return cOperand2HyOrExpressionParserRuleCall_1_2_0; }
	}
	public class HyOrExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyOrExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHyImpliesExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyOrExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cVerticalLineVerticalLineKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HyImpliesExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyOrExpression HyExpression:
		//	HyImpliesExpression ({HyOrExpression.operand1=current} '||' operand2=HyImpliesExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HyImpliesExpression ({HyOrExpression.operand1=current} '||' operand2=HyImpliesExpression)*
		public Group getGroup() { return cGroup; }
		
		//HyImpliesExpression
		public RuleCall getHyImpliesExpressionParserRuleCall_0() { return cHyImpliesExpressionParserRuleCall_0; }
		
		//({HyOrExpression.operand1=current} '||' operand2=HyImpliesExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyOrExpression.operand1=current}
		public Action getHyOrExpressionOperand1Action_1_0() { return cHyOrExpressionOperand1Action_1_0; }
		
		//'||'
		public Keyword getVerticalLineVerticalLineKeyword_1_1() { return cVerticalLineVerticalLineKeyword_1_1; }
		
		//operand2=HyImpliesExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HyImpliesExpression
		public RuleCall getOperand2HyImpliesExpressionParserRuleCall_1_2_0() { return cOperand2HyImpliesExpressionParserRuleCall_1_2_0; }
	}
	public class HyImpliesExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyImpliesExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHyEquivalenceExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyImpliesExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HyEquivalenceExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyImpliesExpression HyExpression:
		//	HyEquivalenceExpression ({HyImpliesExpression.operand1=current} '->' operand2=HyEquivalenceExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HyEquivalenceExpression ({HyImpliesExpression.operand1=current} '->' operand2=HyEquivalenceExpression)*
		public Group getGroup() { return cGroup; }
		
		//HyEquivalenceExpression
		public RuleCall getHyEquivalenceExpressionParserRuleCall_0() { return cHyEquivalenceExpressionParserRuleCall_0; }
		
		//({HyImpliesExpression.operand1=current} '->' operand2=HyEquivalenceExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyImpliesExpression.operand1=current}
		public Action getHyImpliesExpressionOperand1Action_1_0() { return cHyImpliesExpressionOperand1Action_1_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_1_1() { return cHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operand2=HyEquivalenceExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HyEquivalenceExpression
		public RuleCall getOperand2HyEquivalenceExpressionParserRuleCall_1_2_0() { return cOperand2HyEquivalenceExpressionParserRuleCall_1_2_0; }
	}
	public class HyEquivalenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyEquivalenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyEquivalenceExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cLessThanSignHyphenMinusGreaterThanSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2TerminalExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyEquivalenceExpression HyExpression:
		//	TerminalExpression ({HyEquivalenceExpression.operand1=current} '<->' operand2=TerminalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalExpression ({HyEquivalenceExpression.operand1=current} '<->' operand2=TerminalExpression)*
		public Group getGroup() { return cGroup; }
		
		//TerminalExpression
		public RuleCall getTerminalExpressionParserRuleCall_0() { return cTerminalExpressionParserRuleCall_0; }
		
		//({HyEquivalenceExpression.operand1=current} '<->' operand2=TerminalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyEquivalenceExpression.operand1=current}
		public Action getHyEquivalenceExpressionOperand1Action_1_0() { return cHyEquivalenceExpressionOperand1Action_1_0; }
		
		//'<->'
		public Keyword getLessThanSignHyphenMinusGreaterThanSignKeyword_1_1() { return cLessThanSignHyphenMinusGreaterThanSignKeyword_1_1; }
		
		//operand2=TerminalExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//TerminalExpression
		public RuleCall getOperand2TerminalExpressionParserRuleCall_1_2_0() { return cOperand2TerminalExpressionParserRuleCall_1_2_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHyFeatureReferenceExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHyNestedExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHyConditionalFeatureReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHyNotExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cHyBooleanValueExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cHyArithmeticalComparisonExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//TerminalExpression HyExpression:
		//	HyFeatureReferenceExpression | HyNestedExpression | HyConditionalFeatureReferenceExpression | HyNotExpression |
		//	HyBooleanValueExpression | => HyArithmeticalComparisonExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyFeatureReferenceExpression | HyNestedExpression | HyConditionalFeatureReferenceExpression | HyNotExpression |
		//HyBooleanValueExpression | => HyArithmeticalComparisonExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HyFeatureReferenceExpression
		public RuleCall getHyFeatureReferenceExpressionParserRuleCall_0() { return cHyFeatureReferenceExpressionParserRuleCall_0; }
		
		//HyNestedExpression
		public RuleCall getHyNestedExpressionParserRuleCall_1() { return cHyNestedExpressionParserRuleCall_1; }
		
		//HyConditionalFeatureReferenceExpression
		public RuleCall getHyConditionalFeatureReferenceExpressionParserRuleCall_2() { return cHyConditionalFeatureReferenceExpressionParserRuleCall_2; }
		
		//HyNotExpression
		public RuleCall getHyNotExpressionParserRuleCall_3() { return cHyNotExpressionParserRuleCall_3; }
		
		//HyBooleanValueExpression
		public RuleCall getHyBooleanValueExpressionParserRuleCall_4() { return cHyBooleanValueExpressionParserRuleCall_4; }
		
		//=> HyArithmeticalComparisonExpression
		public RuleCall getHyArithmeticalComparisonExpressionParserRuleCall_5() { return cHyArithmeticalComparisonExpressionParserRuleCall_5; }
	}
	public class HyNestedExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyNestedExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandHyExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HyNestedExpression:
		//	'(' operand=HyExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operand=HyExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operand=HyExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//HyExpression
		public RuleCall getOperandHyExpressionParserRuleCall_1_0() { return cOperandHyExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class HyNotExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyNotExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandTerminalExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		
		//HyNotExpression:
		//	'!' operand=TerminalExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//'!' operand=TerminalExpression
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//operand=TerminalExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//TerminalExpression
		public RuleCall getOperandTerminalExpressionParserRuleCall_1_0() { return cOperandTerminalExpressionParserRuleCall_1_0; }
	}
	public class HyFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyFeatureReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureHyFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0_0.eContents().get(1);
		private final Assignment cVersionRestrictionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cVersionRestrictionHyVersionRestrictionParserRuleCall_1_0 = (RuleCall)cVersionRestrictionAssignment_1.eContents().get(0);
		
		//HyFeatureReferenceExpression:
		//	feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?;
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?
		public Group getGroup() { return cGroup; }
		
		//feature=[feature::HyFeature|STRING]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_0_0() { return cFeatureHyFeatureCrossReference_0_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1; }
		
		//versionRestriction=HyVersionRestriction?
		public Assignment getVersionRestrictionAssignment_1() { return cVersionRestrictionAssignment_1; }
		
		//HyVersionRestriction
		public RuleCall getVersionRestrictionHyVersionRestrictionParserRuleCall_1_0() { return cVersionRestrictionHyVersionRestrictionParserRuleCall_1_0; }
	}
	public class HyConditionalFeatureReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyConditionalFeatureReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cQuestionMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFeatureAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cFeatureHyFeatureCrossReference_1_0 = (CrossReference)cFeatureAssignment_1.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_1_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_1_0.eContents().get(1);
		private final Assignment cVersionRestrictionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cVersionRestrictionHyVersionRestrictionParserRuleCall_2_0 = (RuleCall)cVersionRestrictionAssignment_2.eContents().get(0);
		
		//HyConditionalFeatureReferenceExpression:
		//	"?" feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?;
		@Override public ParserRule getRule() { return rule; }
		
		//"?" feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?
		public Group getGroup() { return cGroup; }
		
		//"?"
		public Keyword getQuestionMarkKeyword_0() { return cQuestionMarkKeyword_0; }
		
		//feature=[feature::HyFeature|STRING]
		public Assignment getFeatureAssignment_1() { return cFeatureAssignment_1; }
		
		//[feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_1_0() { return cFeatureHyFeatureCrossReference_1_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_1_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_1_0_1; }
		
		//versionRestriction=HyVersionRestriction?
		public Assignment getVersionRestrictionAssignment_2() { return cVersionRestrictionAssignment_2; }
		
		//HyVersionRestriction
		public RuleCall getVersionRestrictionHyVersionRestrictionParserRuleCall_2_0() { return cVersionRestrictionHyVersionRestrictionParserRuleCall_2_0; }
	}
	public class HyVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyVersionRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHyRelativeVersionRestrictionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHyVersionRangeRestrictionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HyVersionRestriction:
		//	HyRelativeVersionRestriction | HyVersionRangeRestriction;
		@Override public ParserRule getRule() { return rule; }
		
		//HyRelativeVersionRestriction | HyVersionRangeRestriction
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HyRelativeVersionRestriction
		public RuleCall getHyRelativeVersionRestrictionParserRuleCall_0() { return cHyRelativeVersionRestrictionParserRuleCall_0; }
		
		//HyVersionRangeRestriction
		public RuleCall getHyVersionRangeRestrictionParserRuleCall_1() { return cHyVersionRangeRestrictionParserRuleCall_1; }
	}
	public class HyRelativeVersionRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyRelativeVersionRestriction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorHyRelativeVersionRestrictionOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cVersionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cVersionHyVersionCrossReference_2_0 = (CrossReference)cVersionAssignment_2.eContents().get(0);
		private final RuleCall cVersionHyVersionIDTerminalRuleCall_2_0_1 = (RuleCall)cVersionHyVersionCrossReference_2_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//HyRelativeVersionRestriction:
		//	"[" operator=HyRelativeVersionRestrictionOperator version=[feature::HyVersion] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" operator=HyRelativeVersionRestrictionOperator version=[feature::HyVersion] "]"
		public Group getGroup() { return cGroup; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0() { return cLeftSquareBracketKeyword_0; }
		
		//operator=HyRelativeVersionRestrictionOperator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//HyRelativeVersionRestrictionOperator
		public RuleCall getOperatorHyRelativeVersionRestrictionOperatorEnumRuleCall_1_0() { return cOperatorHyRelativeVersionRestrictionOperatorEnumRuleCall_1_0; }
		
		//version=[feature::HyVersion]
		public Assignment getVersionAssignment_2() { return cVersionAssignment_2; }
		
		//[feature::HyVersion]
		public CrossReference getVersionHyVersionCrossReference_2_0() { return cVersionHyVersionCrossReference_2_0; }
		
		//ID
		public RuleCall getVersionHyVersionIDTerminalRuleCall_2_0_1() { return cVersionHyVersionIDTerminalRuleCall_2_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_3() { return cRightSquareBracketKeyword_3; }
	}
	public class HyVersionRangeRestrictionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyVersionRangeRestriction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cLowerIncludedAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final Keyword cLowerIncludedTrueKeyword_0_1_0 = (Keyword)cLowerIncludedAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cFalseKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cLowerVersionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cLowerVersionHyVersionCrossReference_1_1_0 = (CrossReference)cLowerVersionAssignment_1_1.eContents().get(0);
		private final RuleCall cLowerVersionHyVersionSTRINGTerminalRuleCall_1_1_0_1 = (RuleCall)cLowerVersionHyVersionCrossReference_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cUpperIncludedAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final Keyword cUpperIncludedTrueKeyword_1_3_0 = (Keyword)cUpperIncludedAssignment_1_3.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cFalseKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cUpperVersionAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cUpperVersionHyVersionCrossReference_2_1_0 = (CrossReference)cUpperVersionAssignment_2_1.eContents().get(0);
		private final RuleCall cUpperVersionHyVersionSTRINGTerminalRuleCall_2_1_0_1 = (RuleCall)cUpperVersionHyVersionCrossReference_2_1_0.eContents().get(1);
		private final Keyword cRightSquareBracketKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//HyVersionRangeRestriction:
		//	"[" lowerIncluded?='true' | 'false' lowerVersion=[feature::HyVersion|STRING] "-" upperIncluded?='true' | 'false'
		//	upperVersion=[feature::HyVersion|STRING] "]";
		@Override public ParserRule getRule() { return rule; }
		
		//"[" lowerIncluded?='true' | 'false' lowerVersion=[feature::HyVersion|STRING] "-" upperIncluded?='true' | 'false'
		//upperVersion=[feature::HyVersion|STRING] "]"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//"[" lowerIncluded?='true'
		public Group getGroup_0() { return cGroup_0; }
		
		//"["
		public Keyword getLeftSquareBracketKeyword_0_0() { return cLeftSquareBracketKeyword_0_0; }
		
		//lowerIncluded?='true'
		public Assignment getLowerIncludedAssignment_0_1() { return cLowerIncludedAssignment_0_1; }
		
		//'true'
		public Keyword getLowerIncludedTrueKeyword_0_1_0() { return cLowerIncludedTrueKeyword_0_1_0; }
		
		//'false' lowerVersion=[feature::HyVersion|STRING] "-" upperIncluded?='true'
		public Group getGroup_1() { return cGroup_1; }
		
		//'false'
		public Keyword getFalseKeyword_1_0() { return cFalseKeyword_1_0; }
		
		//lowerVersion=[feature::HyVersion|STRING]
		public Assignment getLowerVersionAssignment_1_1() { return cLowerVersionAssignment_1_1; }
		
		//[feature::HyVersion|STRING]
		public CrossReference getLowerVersionHyVersionCrossReference_1_1_0() { return cLowerVersionHyVersionCrossReference_1_1_0; }
		
		//STRING
		public RuleCall getLowerVersionHyVersionSTRINGTerminalRuleCall_1_1_0_1() { return cLowerVersionHyVersionSTRINGTerminalRuleCall_1_1_0_1; }
		
		//"-"
		public Keyword getHyphenMinusKeyword_1_2() { return cHyphenMinusKeyword_1_2; }
		
		//upperIncluded?='true'
		public Assignment getUpperIncludedAssignment_1_3() { return cUpperIncludedAssignment_1_3; }
		
		//'true'
		public Keyword getUpperIncludedTrueKeyword_1_3_0() { return cUpperIncludedTrueKeyword_1_3_0; }
		
		//'false' upperVersion=[feature::HyVersion|STRING] "]"
		public Group getGroup_2() { return cGroup_2; }
		
		//'false'
		public Keyword getFalseKeyword_2_0() { return cFalseKeyword_2_0; }
		
		//upperVersion=[feature::HyVersion|STRING]
		public Assignment getUpperVersionAssignment_2_1() { return cUpperVersionAssignment_2_1; }
		
		//[feature::HyVersion|STRING]
		public CrossReference getUpperVersionHyVersionCrossReference_2_1_0() { return cUpperVersionHyVersionCrossReference_2_1_0; }
		
		//STRING
		public RuleCall getUpperVersionHyVersionSTRINGTerminalRuleCall_2_1_0_1() { return cUpperVersionHyVersionSTRINGTerminalRuleCall_2_1_0_1; }
		
		//"]"
		public Keyword getRightSquareBracketKeyword_2_2() { return cRightSquareBracketKeyword_2_2; }
	}
	public class HyBooleanValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyBooleanValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueExpressionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HyBooleanValueExpression:
		//	{HyBooleanValueExpression} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{HyBooleanValueExpression} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{HyBooleanValueExpression}
		public Action getHyBooleanValueExpressionAction_0() { return cHyBooleanValueExpressionAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class HyArithmeticalComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyArithmeticalComparisonExpression");
		private final RuleCall cHyBinaryArithmeticalComparisonExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HyArithmeticalComparisonExpression:
		//	HyBinaryArithmeticalComparisonExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyBinaryArithmeticalComparisonExpression
		public RuleCall getHyBinaryArithmeticalComparisonExpressionParserRuleCall() { return cHyBinaryArithmeticalComparisonExpressionParserRuleCall; }
	}
	public class HyBinaryArithmeticalComparisonExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyBinaryArithmeticalComparisonExpression");
		private final RuleCall cHyGreaterExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HyBinaryArithmeticalComparisonExpression:
		//	HyGreaterExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyGreaterExpression
		public RuleCall getHyGreaterExpressionParserRuleCall() { return cHyGreaterExpressionParserRuleCall; }
	}
	public class HyGreaterExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyGreaterExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperand1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0 = (RuleCall)cOperand1Assignment_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperand2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0 = (RuleCall)cOperand2Assignment_0_2.eContents().get(0);
		private final RuleCall cHyLessExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// Used syntactic predicates as operand1 can be nested arbitrarily and therefore, the ANTLR does not know which operator to take
		//HyGreaterExpression HyBinaryArithmeticalComparisonExpression:
		//	=> operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression | HyLessExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression | HyLessExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0_0() { return cOperand1Assignment_0_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0; }
		
		//'>'
		public Keyword getGreaterThanSignKeyword_0_1() { return cGreaterThanSignKeyword_0_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_0_2() { return cOperand2Assignment_0_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0; }
		
		//HyLessExpression
		public RuleCall getHyLessExpressionParserRuleCall_1() { return cHyLessExpressionParserRuleCall_1; }
	}
	public class HyLessExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyLessExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperand1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0 = (RuleCall)cOperand1Assignment_0_0.eContents().get(0);
		private final Keyword cLessThanSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperand2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0 = (RuleCall)cOperand2Assignment_0_2.eContents().get(0);
		private final RuleCall cHyGreaterOrEqualExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HyLessExpression HyBinaryArithmeticalComparisonExpression:
		//	=> operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression | HyGreaterOrEqualExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression | HyGreaterOrEqualExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0_0() { return cOperand1Assignment_0_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0; }
		
		//'<'
		public Keyword getLessThanSignKeyword_0_1() { return cLessThanSignKeyword_0_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_0_2() { return cOperand2Assignment_0_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0; }
		
		//HyGreaterOrEqualExpression
		public RuleCall getHyGreaterOrEqualExpressionParserRuleCall_1() { return cHyGreaterOrEqualExpressionParserRuleCall_1; }
	}
	public class HyGreaterOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyGreaterOrEqualExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperand1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0 = (RuleCall)cOperand1Assignment_0_0.eContents().get(0);
		private final Keyword cGreaterThanSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperand2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0 = (RuleCall)cOperand2Assignment_0_2.eContents().get(0);
		private final RuleCall cHyLessOrEqualExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HyGreaterOrEqualExpression HyBinaryArithmeticalComparisonExpression:
		//	=> operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression | HyLessOrEqualExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression | HyLessOrEqualExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0_0() { return cOperand1Assignment_0_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0; }
		
		//'>='
		public Keyword getGreaterThanSignEqualsSignKeyword_0_1() { return cGreaterThanSignEqualsSignKeyword_0_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_0_2() { return cOperand2Assignment_0_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0; }
		
		//HyLessOrEqualExpression
		public RuleCall getHyLessOrEqualExpressionParserRuleCall_1() { return cHyLessOrEqualExpressionParserRuleCall_1; }
	}
	public class HyLessOrEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyLessOrEqualExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperand1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0 = (RuleCall)cOperand1Assignment_0_0.eContents().get(0);
		private final Keyword cLessThanSignEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperand2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0 = (RuleCall)cOperand2Assignment_0_2.eContents().get(0);
		private final RuleCall cHyEqualExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HyLessOrEqualExpression HyBinaryArithmeticalComparisonExpression:
		//	=> operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression | HyEqualExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression | HyEqualExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0_0() { return cOperand1Assignment_0_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0; }
		
		//'<='
		public Keyword getLessThanSignEqualsSignKeyword_0_1() { return cLessThanSignEqualsSignKeyword_0_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_0_2() { return cOperand2Assignment_0_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0; }
		
		//HyEqualExpression
		public RuleCall getHyEqualExpressionParserRuleCall_1() { return cHyEqualExpressionParserRuleCall_1; }
	}
	public class HyEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyEqualExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cOperand1Assignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0 = (RuleCall)cOperand1Assignment_0_0.eContents().get(0);
		private final Keyword cEqualsSignKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cOperand2Assignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0 = (RuleCall)cOperand2Assignment_0_2.eContents().get(0);
		private final RuleCall cHyNotEqualExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//HyEqualExpression HyBinaryArithmeticalComparisonExpression:
		//	=> operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression | HyNotEqualExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//=> operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression | HyNotEqualExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression
		public Group getGroup_0() { return cGroup_0; }
		
		//=> operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0_0() { return cOperand1Assignment_0_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0_0; }
		
		//'='
		public Keyword getEqualsSignKeyword_0_1() { return cEqualsSignKeyword_0_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_0_2() { return cOperand2Assignment_0_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_0_2_0; }
		
		//HyNotEqualExpression
		public RuleCall getHyNotEqualExpressionParserRuleCall_1() { return cHyNotEqualExpressionParserRuleCall_1; }
	}
	public class HyNotEqualExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyNotEqualExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperand1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0 = (RuleCall)cOperand1Assignment_0.eContents().get(0);
		private final Keyword cExclamationMarkEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cOperand2Assignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOperand2HyArithmeticalValueExpressionParserRuleCall_2_0 = (RuleCall)cOperand2Assignment_2.eContents().get(0);
		
		//HyNotEqualExpression HyBinaryArithmeticalComparisonExpression:
		//	operand1=HyArithmeticalValueExpression '!=' operand2=HyArithmeticalValueExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//operand1=HyArithmeticalValueExpression '!=' operand2=HyArithmeticalValueExpression
		public Group getGroup() { return cGroup; }
		
		//operand1=HyArithmeticalValueExpression
		public Assignment getOperand1Assignment_0() { return cOperand1Assignment_0; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand1HyArithmeticalValueExpressionParserRuleCall_0_0() { return cOperand1HyArithmeticalValueExpressionParserRuleCall_0_0; }
		
		//'!='
		public Keyword getExclamationMarkEqualsSignKeyword_1() { return cExclamationMarkEqualsSignKeyword_1; }
		
		//operand2=HyArithmeticalValueExpression
		public Assignment getOperand2Assignment_2() { return cOperand2Assignment_2; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperand2HyArithmeticalValueExpressionParserRuleCall_2_0() { return cOperand2HyArithmeticalValueExpressionParserRuleCall_2_0; }
	}
	public class HyArithmeticalValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyArithmeticalValueExpression");
		private final RuleCall cHyAdditionExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//HyArithmeticalValueExpression:
		//	HyAdditionExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyAdditionExpression
		public RuleCall getHyAdditionExpressionParserRuleCall() { return cHyAdditionExpressionParserRuleCall; }
	}
	public class HyAdditionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyAdditionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHySubtractionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyAdditionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cPlusSignKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HySubtractionExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyAdditionExpression HyArithmeticalValueExpression:
		//	HySubtractionExpression ({HyAdditionExpression.operand1=current} '+' operand2=HySubtractionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HySubtractionExpression ({HyAdditionExpression.operand1=current} '+' operand2=HySubtractionExpression)*
		public Group getGroup() { return cGroup; }
		
		//HySubtractionExpression
		public RuleCall getHySubtractionExpressionParserRuleCall_0() { return cHySubtractionExpressionParserRuleCall_0; }
		
		//({HyAdditionExpression.operand1=current} '+' operand2=HySubtractionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyAdditionExpression.operand1=current}
		public Action getHyAdditionExpressionOperand1Action_1_0() { return cHyAdditionExpressionOperand1Action_1_0; }
		
		//'+'
		public Keyword getPlusSignKeyword_1_1() { return cPlusSignKeyword_1_1; }
		
		//operand2=HySubtractionExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HySubtractionExpression
		public RuleCall getOperand2HySubtractionExpressionParserRuleCall_1_2_0() { return cOperand2HySubtractionExpressionParserRuleCall_1_2_0; }
	}
	public class HySubtractionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HySubtractionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHyMultiplicationExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHySubtractionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cHyphenMinusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HyMultiplicationExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HySubtractionExpression HyArithmeticalValueExpression:
		//	HyMultiplicationExpression ({HySubtractionExpression.operand1=current} '-' operand2=HyMultiplicationExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HyMultiplicationExpression ({HySubtractionExpression.operand1=current} '-' operand2=HyMultiplicationExpression)*
		public Group getGroup() { return cGroup; }
		
		//HyMultiplicationExpression
		public RuleCall getHyMultiplicationExpressionParserRuleCall_0() { return cHyMultiplicationExpressionParserRuleCall_0; }
		
		//({HySubtractionExpression.operand1=current} '-' operand2=HyMultiplicationExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HySubtractionExpression.operand1=current}
		public Action getHySubtractionExpressionOperand1Action_1_0() { return cHySubtractionExpressionOperand1Action_1_0; }
		
		//'-'
		public Keyword getHyphenMinusKeyword_1_1() { return cHyphenMinusKeyword_1_1; }
		
		//operand2=HyMultiplicationExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HyMultiplicationExpression
		public RuleCall getOperand2HyMultiplicationExpressionParserRuleCall_1_2_0() { return cOperand2HyMultiplicationExpressionParserRuleCall_1_2_0; }
	}
	public class HyMultiplicationExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyMultiplicationExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cHyDivisionExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyMultiplicationExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cAsteriskKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2HyDivisionExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyMultiplicationExpression HyArithmeticalValueExpression:
		//	HyDivisionExpression ({HyMultiplicationExpression.operand1=current} '*' operand2=HyDivisionExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//HyDivisionExpression ({HyMultiplicationExpression.operand1=current} '*' operand2=HyDivisionExpression)*
		public Group getGroup() { return cGroup; }
		
		//HyDivisionExpression
		public RuleCall getHyDivisionExpressionParserRuleCall_0() { return cHyDivisionExpressionParserRuleCall_0; }
		
		//({HyMultiplicationExpression.operand1=current} '*' operand2=HyDivisionExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyMultiplicationExpression.operand1=current}
		public Action getHyMultiplicationExpressionOperand1Action_1_0() { return cHyMultiplicationExpressionOperand1Action_1_0; }
		
		//'*'
		public Keyword getAsteriskKeyword_1_1() { return cAsteriskKeyword_1_1; }
		
		//operand2=HyDivisionExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//HyDivisionExpression
		public RuleCall getOperand2HyDivisionExpressionParserRuleCall_1_2_0() { return cOperand2HyDivisionExpressionParserRuleCall_1_2_0; }
	}
	public class HyDivisionExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyDivisionExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cTerminalArithmeticalExpressionParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cHyDivisionExpressionOperand1Action_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cSolidusKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cOperand2Assignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cOperand2TerminalArithmeticalExpressionParserRuleCall_1_2_0 = (RuleCall)cOperand2Assignment_1_2.eContents().get(0);
		
		//HyDivisionExpression HyArithmeticalValueExpression:
		//	TerminalArithmeticalExpression ({HyDivisionExpression.operand1=current} '/'
		//	operand2=TerminalArithmeticalExpression)*;
		@Override public ParserRule getRule() { return rule; }
		
		//TerminalArithmeticalExpression ({HyDivisionExpression.operand1=current} '/' operand2=TerminalArithmeticalExpression)*
		public Group getGroup() { return cGroup; }
		
		//TerminalArithmeticalExpression
		public RuleCall getTerminalArithmeticalExpressionParserRuleCall_0() { return cTerminalArithmeticalExpressionParserRuleCall_0; }
		
		//({HyDivisionExpression.operand1=current} '/' operand2=TerminalArithmeticalExpression)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{HyDivisionExpression.operand1=current}
		public Action getHyDivisionExpressionOperand1Action_1_0() { return cHyDivisionExpressionOperand1Action_1_0; }
		
		//'/'
		public Keyword getSolidusKeyword_1_1() { return cSolidusKeyword_1_1; }
		
		//operand2=TerminalArithmeticalExpression
		public Assignment getOperand2Assignment_1_2() { return cOperand2Assignment_1_2; }
		
		//TerminalArithmeticalExpression
		public RuleCall getOperand2TerminalArithmeticalExpressionParserRuleCall_1_2_0() { return cOperand2TerminalArithmeticalExpressionParserRuleCall_1_2_0; }
	}
	public class TerminalArithmeticalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.TerminalArithmeticalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHyValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHyNestedArithmeticalValueExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHyContextInformationReferenceExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHyAttributeReferenceExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//TerminalArithmeticalExpression HyArithmeticalValueExpression:
		//	HyValueExpression
		//	| HyNestedArithmeticalValueExpression
		//	/*| HyNegationExpression*/
		//	| => HyContextInformationReferenceExpression | HyAttributeReferenceExpression;
		@Override public ParserRule getRule() { return rule; }
		
		//HyValueExpression | HyNestedArithmeticalValueExpression /*| HyNegationExpression*/ | =>
		//HyContextInformationReferenceExpression | HyAttributeReferenceExpression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HyValueExpression
		public RuleCall getHyValueExpressionParserRuleCall_0() { return cHyValueExpressionParserRuleCall_0; }
		
		//HyNestedArithmeticalValueExpression
		public RuleCall getHyNestedArithmeticalValueExpressionParserRuleCall_1() { return cHyNestedArithmeticalValueExpressionParserRuleCall_1; }
		
		//=> HyContextInformationReferenceExpression
		public RuleCall getHyContextInformationReferenceExpressionParserRuleCall_2() { return cHyContextInformationReferenceExpressionParserRuleCall_2; }
		
		//HyAttributeReferenceExpression
		public RuleCall getHyAttributeReferenceExpressionParserRuleCall_3() { return cHyAttributeReferenceExpressionParserRuleCall_3; }
	}
	public class HyValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyValueExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueHyValueParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HyValueExpression:
		//	value=HyValue;
		@Override public ParserRule getRule() { return rule; }
		
		//value=HyValue
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//HyValue
		public RuleCall getValueHyValueParserRuleCall_0() { return cValueHyValueParserRuleCall_0; }
	}
	public class HyValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cHyNumberValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cHyStringValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cHyBooleanValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHyEnumValueParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//HyValue dataValues::HyValue:
		//	HyNumberValue | HyStringValue | HyBooleanValue | HyEnumValue;
		@Override public ParserRule getRule() { return rule; }
		
		//HyNumberValue | HyStringValue | HyBooleanValue | HyEnumValue
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//HyNumberValue
		public RuleCall getHyNumberValueParserRuleCall_0() { return cHyNumberValueParserRuleCall_0; }
		
		//HyStringValue
		public RuleCall getHyStringValueParserRuleCall_1() { return cHyStringValueParserRuleCall_1; }
		
		//HyBooleanValue
		public RuleCall getHyBooleanValueParserRuleCall_2() { return cHyBooleanValueParserRuleCall_2; }
		
		//HyEnumValue
		public RuleCall getHyEnumValueParserRuleCall_3() { return cHyEnumValueParserRuleCall_3; }
	}
	public class HyNumberValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyNumberValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueEIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HyNumberValue dataValues::HyNumberValue:
		//	value=EInt;
		@Override public ParserRule getRule() { return rule; }
		
		//value=EInt
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//EInt
		public RuleCall getValueEIntParserRuleCall_0() { return cValueEIntParserRuleCall_0; }
	}
	public class HyStringValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyStringValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//HyStringValue dataValues::HyStringValue:
		//	value=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}
	public class HyBooleanValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyBooleanValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cHyBooleanValueAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//HyBooleanValue dataValues::HyBooleanValue:
		//	{dataValues::HyBooleanValue} (value?='true' | 'false');
		@Override public ParserRule getRule() { return rule; }
		
		//{dataValues::HyBooleanValue} (value?='true' | 'false')
		public Group getGroup() { return cGroup; }
		
		//{dataValues::HyBooleanValue}
		public Action getHyBooleanValueAction_0() { return cHyBooleanValueAction_0; }
		
		//value?='true' | 'false'
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//value?='true'
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }
		
		//'true'
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }
		
		//'false'
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}
	public class HyEnumValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyEnumValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEnumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cEnumHyEnumCrossReference_0_0 = (CrossReference)cEnumAssignment_0.eContents().get(0);
		private final RuleCall cEnumHyEnumSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cEnumHyEnumCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cEnumLiteralAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cEnumLiteralHyEnumLiteralCrossReference_2_0 = (CrossReference)cEnumLiteralAssignment_2.eContents().get(0);
		private final RuleCall cEnumLiteralHyEnumLiteralSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cEnumLiteralHyEnumLiteralCrossReference_2_0.eContents().get(1);
		
		//HyEnumValue dataValues::HyEnumValue:
		//	^enum=[dataValues::HyEnum|STRING] '.' enumLiteral=[dataValues::HyEnumLiteral|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//^enum=[dataValues::HyEnum|STRING] '.' enumLiteral=[dataValues::HyEnumLiteral|STRING]
		public Group getGroup() { return cGroup; }
		
		//^enum=[dataValues::HyEnum|STRING]
		public Assignment getEnumAssignment_0() { return cEnumAssignment_0; }
		
		//[dataValues::HyEnum|STRING]
		public CrossReference getEnumHyEnumCrossReference_0_0() { return cEnumHyEnumCrossReference_0_0; }
		
		//STRING
		public RuleCall getEnumHyEnumSTRINGTerminalRuleCall_0_0_1() { return cEnumHyEnumSTRINGTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//enumLiteral=[dataValues::HyEnumLiteral|STRING]
		public Assignment getEnumLiteralAssignment_2() { return cEnumLiteralAssignment_2; }
		
		//[dataValues::HyEnumLiteral|STRING]
		public CrossReference getEnumLiteralHyEnumLiteralCrossReference_2_0() { return cEnumLiteralHyEnumLiteralCrossReference_2_0; }
		
		//STRING
		public RuleCall getEnumLiteralHyEnumLiteralSTRINGTerminalRuleCall_2_0_1() { return cEnumLiteralHyEnumLiteralSTRINGTerminalRuleCall_2_0_1; }
	}
	public class HyNestedArithmeticalValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyNestedArithmeticalValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOperandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperandHyArithmeticalValueExpressionParserRuleCall_1_0 = (RuleCall)cOperandAssignment_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//HyNestedArithmeticalValueExpression:
		//	'(' operand=HyArithmeticalValueExpression ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'(' operand=HyArithmeticalValueExpression ')'
		public Group getGroup() { return cGroup; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }
		
		//operand=HyArithmeticalValueExpression
		public Assignment getOperandAssignment_1() { return cOperandAssignment_1; }
		
		//HyArithmeticalValueExpression
		public RuleCall getOperandHyArithmeticalValueExpressionParserRuleCall_1_0() { return cOperandHyArithmeticalValueExpressionParserRuleCall_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}
	public class HyContextInformationReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyContextInformationReferenceExpression");
		private final Assignment cContextInformationAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cContextInformationHyContextualInformationCrossReference_0 = (CrossReference)cContextInformationAssignment.eContents().get(0);
		private final RuleCall cContextInformationHyContextualInformationSTRINGTerminalRuleCall_0_1 = (RuleCall)cContextInformationHyContextualInformationCrossReference_0.eContents().get(1);
		
		//HyContextInformationReferenceExpression:
		//	contextInformation=[context::HyContextualInformation|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//contextInformation=[context::HyContextualInformation|STRING]
		public Assignment getContextInformationAssignment() { return cContextInformationAssignment; }
		
		//[context::HyContextualInformation|STRING]
		public CrossReference getContextInformationHyContextualInformationCrossReference_0() { return cContextInformationHyContextualInformationCrossReference_0; }
		
		//STRING
		public RuleCall getContextInformationHyContextualInformationSTRINGTerminalRuleCall_0_1() { return cContextInformationHyContextualInformationSTRINGTerminalRuleCall_0_1; }
	}
	public class HyAttributeReferenceExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyAttributeReferenceExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFeatureAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final CrossReference cFeatureHyFeatureCrossReference_0_0 = (CrossReference)cFeatureAssignment_0.eContents().get(0);
		private final RuleCall cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1 = (RuleCall)cFeatureHyFeatureCrossReference_0_0.eContents().get(1);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cAttributeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cAttributeHyFeatureAttributeCrossReference_2_0 = (CrossReference)cAttributeAssignment_2.eContents().get(0);
		private final RuleCall cAttributeHyFeatureAttributeSTRINGTerminalRuleCall_2_0_1 = (RuleCall)cAttributeHyFeatureAttributeCrossReference_2_0.eContents().get(1);
		
		//HyAttributeReferenceExpression:
		//	feature=[feature::HyFeature|STRING] '.' attribute=[feature::HyFeatureAttribute|STRING];
		@Override public ParserRule getRule() { return rule; }
		
		//feature=[feature::HyFeature|STRING] '.' attribute=[feature::HyFeatureAttribute|STRING]
		public Group getGroup() { return cGroup; }
		
		//feature=[feature::HyFeature|STRING]
		public Assignment getFeatureAssignment_0() { return cFeatureAssignment_0; }
		
		//[feature::HyFeature|STRING]
		public CrossReference getFeatureHyFeatureCrossReference_0_0() { return cFeatureHyFeatureCrossReference_0_0; }
		
		//STRING
		public RuleCall getFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1() { return cFeatureHyFeatureSTRINGTerminalRuleCall_0_0_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//attribute=[feature::HyFeatureAttribute|STRING]
		public Assignment getAttributeAssignment_2() { return cAttributeAssignment_2; }
		
		//[feature::HyFeatureAttribute|STRING]
		public CrossReference getAttributeHyFeatureAttributeCrossReference_2_0() { return cAttributeHyFeatureAttributeCrossReference_2_0; }
		
		//STRING
		public RuleCall getAttributeHyFeatureAttributeSTRINGTerminalRuleCall_2_0_1() { return cAttributeHyFeatureAttributeSTRINGTerminalRuleCall_2_0_1; }
	}
	public class EIntElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.EInt");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		
		//// Not working right now. Necessary?
		////HyNegationExpression returns HyNegationExpression:
		////	'-' operand=HyArithmeticalValueExpression;
		////QualifiedName returns ecore::EString:
		////ID ("." ID)*;
		//EInt ecore::EInt:
		//	'-'? INT;
		@Override public ParserRule getRule() { return rule; }
		
		//'-'? INT
		public Group getGroup() { return cGroup; }
		
		//'-'?
		public Keyword getHyphenMinusKeyword_0() { return cHyphenMinusKeyword_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1() { return cINTTerminalRuleCall_1; }
	}
	
	public class HyRelativeVersionRestrictionOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "de.darwinspl.ExpressionDsl.HyRelativeVersionRestrictionOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThanLessThanSignKeyword_0_0 = (Keyword)cLessThanEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanOrEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0 = (Keyword)cLessThanOrEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cEqualEqualsSignKeyword_2_0 = (Keyword)cEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanOrEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterThanOrEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanGreaterThanSignKeyword_4_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum HyRelativeVersionRestrictionOperator:
		//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
		public EnumRule getRule() { return rule; }
		
		//lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//lessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_0() { return cLessThanEnumLiteralDeclaration_0; }
		
		//"<"
		public Keyword getLessThanLessThanSignKeyword_0_0() { return cLessThanLessThanSignKeyword_0_0; }
		
		//lessThanOrEqual="<="
		public EnumLiteralDeclaration getLessThanOrEqualEnumLiteralDeclaration_1() { return cLessThanOrEqualEnumLiteralDeclaration_1; }
		
		//"<="
		public Keyword getLessThanOrEqualLessThanSignEqualsSignKeyword_1_0() { return cLessThanOrEqualLessThanSignEqualsSignKeyword_1_0; }
		
		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_2() { return cEqualEnumLiteralDeclaration_2; }
		
		//"="
		public Keyword getEqualEqualsSignKeyword_2_0() { return cEqualEqualsSignKeyword_2_0; }
		
		//greaterThanOrEqual=">="
		public EnumLiteralDeclaration getGreaterThanOrEqualEnumLiteralDeclaration_3() { return cGreaterThanOrEqualEnumLiteralDeclaration_3; }
		
		//">="
		public Keyword getGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterThanOrEqualGreaterThanSignEqualsSignKeyword_3_0; }
		
		//greaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_4() { return cGreaterThanEnumLiteralDeclaration_4; }
		
		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_4_0() { return cGreaterThanGreaterThanSignKeyword_4_0; }
	}
	
	private final HyExpressionElements pHyExpression;
	private final HyAndExpressionElements pHyAndExpression;
	private final HyOrExpressionElements pHyOrExpression;
	private final HyImpliesExpressionElements pHyImpliesExpression;
	private final HyEquivalenceExpressionElements pHyEquivalenceExpression;
	private final TerminalExpressionElements pTerminalExpression;
	private final HyNestedExpressionElements pHyNestedExpression;
	private final HyNotExpressionElements pHyNotExpression;
	private final HyFeatureReferenceExpressionElements pHyFeatureReferenceExpression;
	private final HyConditionalFeatureReferenceExpressionElements pHyConditionalFeatureReferenceExpression;
	private final HyVersionRestrictionElements pHyVersionRestriction;
	private final HyRelativeVersionRestrictionElements pHyRelativeVersionRestriction;
	private final HyRelativeVersionRestrictionOperatorElements eHyRelativeVersionRestrictionOperator;
	private final HyVersionRangeRestrictionElements pHyVersionRangeRestriction;
	private final HyBooleanValueExpressionElements pHyBooleanValueExpression;
	private final HyArithmeticalComparisonExpressionElements pHyArithmeticalComparisonExpression;
	private final HyBinaryArithmeticalComparisonExpressionElements pHyBinaryArithmeticalComparisonExpression;
	private final HyGreaterExpressionElements pHyGreaterExpression;
	private final HyLessExpressionElements pHyLessExpression;
	private final HyGreaterOrEqualExpressionElements pHyGreaterOrEqualExpression;
	private final HyLessOrEqualExpressionElements pHyLessOrEqualExpression;
	private final HyEqualExpressionElements pHyEqualExpression;
	private final HyNotEqualExpressionElements pHyNotEqualExpression;
	private final HyArithmeticalValueExpressionElements pHyArithmeticalValueExpression;
	private final HyAdditionExpressionElements pHyAdditionExpression;
	private final HySubtractionExpressionElements pHySubtractionExpression;
	private final HyMultiplicationExpressionElements pHyMultiplicationExpression;
	private final HyDivisionExpressionElements pHyDivisionExpression;
	private final TerminalArithmeticalExpressionElements pTerminalArithmeticalExpression;
	private final HyValueExpressionElements pHyValueExpression;
	private final HyValueElements pHyValue;
	private final HyNumberValueElements pHyNumberValue;
	private final HyStringValueElements pHyStringValue;
	private final HyBooleanValueElements pHyBooleanValue;
	private final HyEnumValueElements pHyEnumValue;
	private final HyNestedArithmeticalValueExpressionElements pHyNestedArithmeticalValueExpression;
	private final HyContextInformationReferenceExpressionElements pHyContextInformationReferenceExpression;
	private final HyAttributeReferenceExpressionElements pHyAttributeReferenceExpression;
	private final EIntElements pEInt;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public ExpressionDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pHyExpression = new HyExpressionElements();
		this.pHyAndExpression = new HyAndExpressionElements();
		this.pHyOrExpression = new HyOrExpressionElements();
		this.pHyImpliesExpression = new HyImpliesExpressionElements();
		this.pHyEquivalenceExpression = new HyEquivalenceExpressionElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pHyNestedExpression = new HyNestedExpressionElements();
		this.pHyNotExpression = new HyNotExpressionElements();
		this.pHyFeatureReferenceExpression = new HyFeatureReferenceExpressionElements();
		this.pHyConditionalFeatureReferenceExpression = new HyConditionalFeatureReferenceExpressionElements();
		this.pHyVersionRestriction = new HyVersionRestrictionElements();
		this.pHyRelativeVersionRestriction = new HyRelativeVersionRestrictionElements();
		this.eHyRelativeVersionRestrictionOperator = new HyRelativeVersionRestrictionOperatorElements();
		this.pHyVersionRangeRestriction = new HyVersionRangeRestrictionElements();
		this.pHyBooleanValueExpression = new HyBooleanValueExpressionElements();
		this.pHyArithmeticalComparisonExpression = new HyArithmeticalComparisonExpressionElements();
		this.pHyBinaryArithmeticalComparisonExpression = new HyBinaryArithmeticalComparisonExpressionElements();
		this.pHyGreaterExpression = new HyGreaterExpressionElements();
		this.pHyLessExpression = new HyLessExpressionElements();
		this.pHyGreaterOrEqualExpression = new HyGreaterOrEqualExpressionElements();
		this.pHyLessOrEqualExpression = new HyLessOrEqualExpressionElements();
		this.pHyEqualExpression = new HyEqualExpressionElements();
		this.pHyNotEqualExpression = new HyNotEqualExpressionElements();
		this.pHyArithmeticalValueExpression = new HyArithmeticalValueExpressionElements();
		this.pHyAdditionExpression = new HyAdditionExpressionElements();
		this.pHySubtractionExpression = new HySubtractionExpressionElements();
		this.pHyMultiplicationExpression = new HyMultiplicationExpressionElements();
		this.pHyDivisionExpression = new HyDivisionExpressionElements();
		this.pTerminalArithmeticalExpression = new TerminalArithmeticalExpressionElements();
		this.pHyValueExpression = new HyValueExpressionElements();
		this.pHyValue = new HyValueElements();
		this.pHyNumberValue = new HyNumberValueElements();
		this.pHyStringValue = new HyStringValueElements();
		this.pHyBooleanValue = new HyBooleanValueElements();
		this.pHyEnumValue = new HyEnumValueElements();
		this.pHyNestedArithmeticalValueExpression = new HyNestedArithmeticalValueExpressionElements();
		this.pHyContextInformationReferenceExpression = new HyContextInformationReferenceExpressionElements();
		this.pHyAttributeReferenceExpression = new HyAttributeReferenceExpressionElements();
		this.pEInt = new EIntElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("de.darwinspl.ExpressionDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//HyExpression:
	//	HyAndExpression;
	public HyExpressionElements getHyExpressionAccess() {
		return pHyExpression;
	}
	
	public ParserRule getHyExpressionRule() {
		return getHyExpressionAccess().getRule();
	}
	
	//HyAndExpression HyExpression:
	//	HyOrExpression ({HyAndExpression.operand1=current} '&&' operand2=HyOrExpression)*;
	public HyAndExpressionElements getHyAndExpressionAccess() {
		return pHyAndExpression;
	}
	
	public ParserRule getHyAndExpressionRule() {
		return getHyAndExpressionAccess().getRule();
	}
	
	//HyOrExpression HyExpression:
	//	HyImpliesExpression ({HyOrExpression.operand1=current} '||' operand2=HyImpliesExpression)*;
	public HyOrExpressionElements getHyOrExpressionAccess() {
		return pHyOrExpression;
	}
	
	public ParserRule getHyOrExpressionRule() {
		return getHyOrExpressionAccess().getRule();
	}
	
	//HyImpliesExpression HyExpression:
	//	HyEquivalenceExpression ({HyImpliesExpression.operand1=current} '->' operand2=HyEquivalenceExpression)*;
	public HyImpliesExpressionElements getHyImpliesExpressionAccess() {
		return pHyImpliesExpression;
	}
	
	public ParserRule getHyImpliesExpressionRule() {
		return getHyImpliesExpressionAccess().getRule();
	}
	
	//HyEquivalenceExpression HyExpression:
	//	TerminalExpression ({HyEquivalenceExpression.operand1=current} '<->' operand2=TerminalExpression)*;
	public HyEquivalenceExpressionElements getHyEquivalenceExpressionAccess() {
		return pHyEquivalenceExpression;
	}
	
	public ParserRule getHyEquivalenceExpressionRule() {
		return getHyEquivalenceExpressionAccess().getRule();
	}
	
	//TerminalExpression HyExpression:
	//	HyFeatureReferenceExpression | HyNestedExpression | HyConditionalFeatureReferenceExpression | HyNotExpression |
	//	HyBooleanValueExpression | => HyArithmeticalComparisonExpression;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//HyNestedExpression:
	//	'(' operand=HyExpression ')';
	public HyNestedExpressionElements getHyNestedExpressionAccess() {
		return pHyNestedExpression;
	}
	
	public ParserRule getHyNestedExpressionRule() {
		return getHyNestedExpressionAccess().getRule();
	}
	
	//HyNotExpression:
	//	'!' operand=TerminalExpression;
	public HyNotExpressionElements getHyNotExpressionAccess() {
		return pHyNotExpression;
	}
	
	public ParserRule getHyNotExpressionRule() {
		return getHyNotExpressionAccess().getRule();
	}
	
	//HyFeatureReferenceExpression:
	//	feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?;
	public HyFeatureReferenceExpressionElements getHyFeatureReferenceExpressionAccess() {
		return pHyFeatureReferenceExpression;
	}
	
	public ParserRule getHyFeatureReferenceExpressionRule() {
		return getHyFeatureReferenceExpressionAccess().getRule();
	}
	
	//HyConditionalFeatureReferenceExpression:
	//	"?" feature=[feature::HyFeature|STRING] versionRestriction=HyVersionRestriction?;
	public HyConditionalFeatureReferenceExpressionElements getHyConditionalFeatureReferenceExpressionAccess() {
		return pHyConditionalFeatureReferenceExpression;
	}
	
	public ParserRule getHyConditionalFeatureReferenceExpressionRule() {
		return getHyConditionalFeatureReferenceExpressionAccess().getRule();
	}
	
	//HyVersionRestriction:
	//	HyRelativeVersionRestriction | HyVersionRangeRestriction;
	public HyVersionRestrictionElements getHyVersionRestrictionAccess() {
		return pHyVersionRestriction;
	}
	
	public ParserRule getHyVersionRestrictionRule() {
		return getHyVersionRestrictionAccess().getRule();
	}
	
	//HyRelativeVersionRestriction:
	//	"[" operator=HyRelativeVersionRestrictionOperator version=[feature::HyVersion] "]";
	public HyRelativeVersionRestrictionElements getHyRelativeVersionRestrictionAccess() {
		return pHyRelativeVersionRestriction;
	}
	
	public ParserRule getHyRelativeVersionRestrictionRule() {
		return getHyRelativeVersionRestrictionAccess().getRule();
	}
	
	//enum HyRelativeVersionRestrictionOperator:
	//	lessThan="<" | lessThanOrEqual="<=" | equal="=" | greaterThanOrEqual=">=" | greaterThan=">";
	public HyRelativeVersionRestrictionOperatorElements getHyRelativeVersionRestrictionOperatorAccess() {
		return eHyRelativeVersionRestrictionOperator;
	}
	
	public EnumRule getHyRelativeVersionRestrictionOperatorRule() {
		return getHyRelativeVersionRestrictionOperatorAccess().getRule();
	}
	
	//HyVersionRangeRestriction:
	//	"[" lowerIncluded?='true' | 'false' lowerVersion=[feature::HyVersion|STRING] "-" upperIncluded?='true' | 'false'
	//	upperVersion=[feature::HyVersion|STRING] "]";
	public HyVersionRangeRestrictionElements getHyVersionRangeRestrictionAccess() {
		return pHyVersionRangeRestriction;
	}
	
	public ParserRule getHyVersionRangeRestrictionRule() {
		return getHyVersionRangeRestrictionAccess().getRule();
	}
	
	//HyBooleanValueExpression:
	//	{HyBooleanValueExpression} (value?='true' | 'false');
	public HyBooleanValueExpressionElements getHyBooleanValueExpressionAccess() {
		return pHyBooleanValueExpression;
	}
	
	public ParserRule getHyBooleanValueExpressionRule() {
		return getHyBooleanValueExpressionAccess().getRule();
	}
	
	//HyArithmeticalComparisonExpression:
	//	HyBinaryArithmeticalComparisonExpression;
	public HyArithmeticalComparisonExpressionElements getHyArithmeticalComparisonExpressionAccess() {
		return pHyArithmeticalComparisonExpression;
	}
	
	public ParserRule getHyArithmeticalComparisonExpressionRule() {
		return getHyArithmeticalComparisonExpressionAccess().getRule();
	}
	
	//HyBinaryArithmeticalComparisonExpression:
	//	HyGreaterExpression;
	public HyBinaryArithmeticalComparisonExpressionElements getHyBinaryArithmeticalComparisonExpressionAccess() {
		return pHyBinaryArithmeticalComparisonExpression;
	}
	
	public ParserRule getHyBinaryArithmeticalComparisonExpressionRule() {
		return getHyBinaryArithmeticalComparisonExpressionAccess().getRule();
	}
	
	//// Used syntactic predicates as operand1 can be nested arbitrarily and therefore, the ANTLR does not know which operator to take
	//HyGreaterExpression HyBinaryArithmeticalComparisonExpression:
	//	=> operand1=HyArithmeticalValueExpression '>' operand2=HyArithmeticalValueExpression | HyLessExpression;
	public HyGreaterExpressionElements getHyGreaterExpressionAccess() {
		return pHyGreaterExpression;
	}
	
	public ParserRule getHyGreaterExpressionRule() {
		return getHyGreaterExpressionAccess().getRule();
	}
	
	//HyLessExpression HyBinaryArithmeticalComparisonExpression:
	//	=> operand1=HyArithmeticalValueExpression '<' operand2=HyArithmeticalValueExpression | HyGreaterOrEqualExpression;
	public HyLessExpressionElements getHyLessExpressionAccess() {
		return pHyLessExpression;
	}
	
	public ParserRule getHyLessExpressionRule() {
		return getHyLessExpressionAccess().getRule();
	}
	
	//HyGreaterOrEqualExpression HyBinaryArithmeticalComparisonExpression:
	//	=> operand1=HyArithmeticalValueExpression '>=' operand2=HyArithmeticalValueExpression | HyLessOrEqualExpression;
	public HyGreaterOrEqualExpressionElements getHyGreaterOrEqualExpressionAccess() {
		return pHyGreaterOrEqualExpression;
	}
	
	public ParserRule getHyGreaterOrEqualExpressionRule() {
		return getHyGreaterOrEqualExpressionAccess().getRule();
	}
	
	//HyLessOrEqualExpression HyBinaryArithmeticalComparisonExpression:
	//	=> operand1=HyArithmeticalValueExpression '<=' operand2=HyArithmeticalValueExpression | HyEqualExpression;
	public HyLessOrEqualExpressionElements getHyLessOrEqualExpressionAccess() {
		return pHyLessOrEqualExpression;
	}
	
	public ParserRule getHyLessOrEqualExpressionRule() {
		return getHyLessOrEqualExpressionAccess().getRule();
	}
	
	//HyEqualExpression HyBinaryArithmeticalComparisonExpression:
	//	=> operand1=HyArithmeticalValueExpression '=' operand2=HyArithmeticalValueExpression | HyNotEqualExpression;
	public HyEqualExpressionElements getHyEqualExpressionAccess() {
		return pHyEqualExpression;
	}
	
	public ParserRule getHyEqualExpressionRule() {
		return getHyEqualExpressionAccess().getRule();
	}
	
	//HyNotEqualExpression HyBinaryArithmeticalComparisonExpression:
	//	operand1=HyArithmeticalValueExpression '!=' operand2=HyArithmeticalValueExpression;
	public HyNotEqualExpressionElements getHyNotEqualExpressionAccess() {
		return pHyNotEqualExpression;
	}
	
	public ParserRule getHyNotEqualExpressionRule() {
		return getHyNotEqualExpressionAccess().getRule();
	}
	
	//HyArithmeticalValueExpression:
	//	HyAdditionExpression;
	public HyArithmeticalValueExpressionElements getHyArithmeticalValueExpressionAccess() {
		return pHyArithmeticalValueExpression;
	}
	
	public ParserRule getHyArithmeticalValueExpressionRule() {
		return getHyArithmeticalValueExpressionAccess().getRule();
	}
	
	//HyAdditionExpression HyArithmeticalValueExpression:
	//	HySubtractionExpression ({HyAdditionExpression.operand1=current} '+' operand2=HySubtractionExpression)*;
	public HyAdditionExpressionElements getHyAdditionExpressionAccess() {
		return pHyAdditionExpression;
	}
	
	public ParserRule getHyAdditionExpressionRule() {
		return getHyAdditionExpressionAccess().getRule();
	}
	
	//HySubtractionExpression HyArithmeticalValueExpression:
	//	HyMultiplicationExpression ({HySubtractionExpression.operand1=current} '-' operand2=HyMultiplicationExpression)*;
	public HySubtractionExpressionElements getHySubtractionExpressionAccess() {
		return pHySubtractionExpression;
	}
	
	public ParserRule getHySubtractionExpressionRule() {
		return getHySubtractionExpressionAccess().getRule();
	}
	
	//HyMultiplicationExpression HyArithmeticalValueExpression:
	//	HyDivisionExpression ({HyMultiplicationExpression.operand1=current} '*' operand2=HyDivisionExpression)*;
	public HyMultiplicationExpressionElements getHyMultiplicationExpressionAccess() {
		return pHyMultiplicationExpression;
	}
	
	public ParserRule getHyMultiplicationExpressionRule() {
		return getHyMultiplicationExpressionAccess().getRule();
	}
	
	//HyDivisionExpression HyArithmeticalValueExpression:
	//	TerminalArithmeticalExpression ({HyDivisionExpression.operand1=current} '/'
	//	operand2=TerminalArithmeticalExpression)*;
	public HyDivisionExpressionElements getHyDivisionExpressionAccess() {
		return pHyDivisionExpression;
	}
	
	public ParserRule getHyDivisionExpressionRule() {
		return getHyDivisionExpressionAccess().getRule();
	}
	
	//TerminalArithmeticalExpression HyArithmeticalValueExpression:
	//	HyValueExpression
	//	| HyNestedArithmeticalValueExpression
	//	/*| HyNegationExpression*/
	//	| => HyContextInformationReferenceExpression | HyAttributeReferenceExpression;
	public TerminalArithmeticalExpressionElements getTerminalArithmeticalExpressionAccess() {
		return pTerminalArithmeticalExpression;
	}
	
	public ParserRule getTerminalArithmeticalExpressionRule() {
		return getTerminalArithmeticalExpressionAccess().getRule();
	}
	
	//HyValueExpression:
	//	value=HyValue;
	public HyValueExpressionElements getHyValueExpressionAccess() {
		return pHyValueExpression;
	}
	
	public ParserRule getHyValueExpressionRule() {
		return getHyValueExpressionAccess().getRule();
	}
	
	//HyValue dataValues::HyValue:
	//	HyNumberValue | HyStringValue | HyBooleanValue | HyEnumValue;
	public HyValueElements getHyValueAccess() {
		return pHyValue;
	}
	
	public ParserRule getHyValueRule() {
		return getHyValueAccess().getRule();
	}
	
	//HyNumberValue dataValues::HyNumberValue:
	//	value=EInt;
	public HyNumberValueElements getHyNumberValueAccess() {
		return pHyNumberValue;
	}
	
	public ParserRule getHyNumberValueRule() {
		return getHyNumberValueAccess().getRule();
	}
	
	//HyStringValue dataValues::HyStringValue:
	//	value=STRING;
	public HyStringValueElements getHyStringValueAccess() {
		return pHyStringValue;
	}
	
	public ParserRule getHyStringValueRule() {
		return getHyStringValueAccess().getRule();
	}
	
	//HyBooleanValue dataValues::HyBooleanValue:
	//	{dataValues::HyBooleanValue} (value?='true' | 'false');
	public HyBooleanValueElements getHyBooleanValueAccess() {
		return pHyBooleanValue;
	}
	
	public ParserRule getHyBooleanValueRule() {
		return getHyBooleanValueAccess().getRule();
	}
	
	//HyEnumValue dataValues::HyEnumValue:
	//	^enum=[dataValues::HyEnum|STRING] '.' enumLiteral=[dataValues::HyEnumLiteral|STRING];
	public HyEnumValueElements getHyEnumValueAccess() {
		return pHyEnumValue;
	}
	
	public ParserRule getHyEnumValueRule() {
		return getHyEnumValueAccess().getRule();
	}
	
	//HyNestedArithmeticalValueExpression:
	//	'(' operand=HyArithmeticalValueExpression ')';
	public HyNestedArithmeticalValueExpressionElements getHyNestedArithmeticalValueExpressionAccess() {
		return pHyNestedArithmeticalValueExpression;
	}
	
	public ParserRule getHyNestedArithmeticalValueExpressionRule() {
		return getHyNestedArithmeticalValueExpressionAccess().getRule();
	}
	
	//HyContextInformationReferenceExpression:
	//	contextInformation=[context::HyContextualInformation|STRING];
	public HyContextInformationReferenceExpressionElements getHyContextInformationReferenceExpressionAccess() {
		return pHyContextInformationReferenceExpression;
	}
	
	public ParserRule getHyContextInformationReferenceExpressionRule() {
		return getHyContextInformationReferenceExpressionAccess().getRule();
	}
	
	//HyAttributeReferenceExpression:
	//	feature=[feature::HyFeature|STRING] '.' attribute=[feature::HyFeatureAttribute|STRING];
	public HyAttributeReferenceExpressionElements getHyAttributeReferenceExpressionAccess() {
		return pHyAttributeReferenceExpression;
	}
	
	public ParserRule getHyAttributeReferenceExpressionRule() {
		return getHyAttributeReferenceExpressionAccess().getRule();
	}
	
	//// Not working right now. Necessary?
	////HyNegationExpression returns HyNegationExpression:
	////	'-' operand=HyArithmeticalValueExpression;
	////QualifiedName returns ecore::EString:
	////ID ("." ID)*;
	//EInt ecore::EInt:
	//	'-'? INT;
	public EIntElements getEIntAccess() {
		return pEInt;
	}
	
	public ParserRule getEIntRule() {
		return getEIntAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
