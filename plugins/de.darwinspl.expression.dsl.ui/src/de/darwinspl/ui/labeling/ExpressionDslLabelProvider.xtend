/*
 * generated by Xtext 2.12.0
 */
package de.darwinspl.ui.labeling

import com.google.inject.Inject
import eu.hyvar.dataValues.HyBooleanValue
import eu.hyvar.dataValues.HyEnumValue
import eu.hyvar.dataValues.HyNumberValue
import eu.hyvar.dataValues.HyStringValue
import eu.hyvar.feature.expression.HyAdditionExpression
import eu.hyvar.feature.expression.HyAndExpression
import eu.hyvar.feature.expression.HyAttributeReferenceExpression
import eu.hyvar.feature.expression.HyBooleanValueExpression
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression
import eu.hyvar.feature.expression.HyDivisionExpression
import eu.hyvar.feature.expression.HyEqualExpression
import eu.hyvar.feature.expression.HyEquivalenceExpression
import eu.hyvar.feature.expression.HyFeatureReferenceExpression
import eu.hyvar.feature.expression.HyGreaterExpression
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression
import eu.hyvar.feature.expression.HyImpliesExpression
import eu.hyvar.feature.expression.HyLessExpression
import eu.hyvar.feature.expression.HyLessOrEqualExpression
import eu.hyvar.feature.expression.HyMultiplicationExpression
import eu.hyvar.feature.expression.HyNestedArithmeticalValueExpression
import eu.hyvar.feature.expression.HyNestedExpression
import eu.hyvar.feature.expression.HyNotEqualExpression
import eu.hyvar.feature.expression.HyRelativeVersionRestriction
import eu.hyvar.feature.expression.HySubtractionExpression
import eu.hyvar.feature.expression.HyValueExpression
import eu.hyvar.feature.expression.HyVersionRangeRestriction
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
class ExpressionDslLabelProvider extends DefaultEObjectLabelProvider {

	@Inject
	new(AdapterFactoryLabelProvider delegate) {
		super(delegate);
	}

// Labels and icons can be computed like this:
	def text(HyGreaterExpression expr) {
		">"
	}

	def text(HyLessExpression expr) {
		"<"
	}

	def text(HyGreaterOrEqualExpression expr) {
		">="
	}

	def text(HyLessOrEqualExpression expr) {
		"<="
	}

	def text(HyEqualExpression expr) {
		"="
	}

	def text(HyNotEqualExpression expr) {
		"!="
	}

	def text(HyImpliesExpression expr) {
		"->"
	}

	def text(HyEquivalenceExpression expr) {
		"<->"
	}

	def text(HyAndExpression expr) {
		"&&"
	}

	def text(HyNestedExpression expr) {
		"Nested"
	}

	def text(HyFeatureReferenceExpression expr) {
		var label = "Feature (ID "
		if (expr.feature !== null) {
			label += expr.feature.id
		}
		label += ")"
		return label;
	}

	def text(HyConditionalFeatureReferenceExpression expr) {
		var label = "Conditional Feature (ID "
		if (expr.feature !== null) {
			label += expr.feature.id
		}
		label += ")"
		return label;
	}

	def text(HyRelativeVersionRestriction expr) {
		var label = "Version ";

		if (expr.operator === null) {
			return label;
		}

		switch (expr.operator) {
			case EQUAL: {
				label += "="
			}
			case GREATER_THAN: {
				label += ">"
			}
			case GREATER_THAN_OR_EQUAL: {
				label += ">="
			}
			case IMPLICIT_EQUAL: {
				label += "(implicit) ="
			}
			case LESS_THAN: {
				label += "<"
			}
			case LESS_THAN_OR_EQUAL: {
				label += "<="
			}
		}

		if (expr.version === null) {
			return label;
		}

		label += " " + expr.version.number;

		return label;
	}

	def text(HyVersionRangeRestriction expr) {
		var label = "Version ";

		if (!expr.lowerIncluded) {
			label += "("
		} else {
			label += "["
		}

		if (expr.lowerVersion !== null) {
			label += expr.lowerVersion.number
		}

		label += " - "

		if (expr.upperVersion !== null) {
			label += expr.upperVersion.number
		}

		if (!expr.upperIncluded) {
			label += ")"
		} else {
			label += "]"
		}

		return label;
	}

	def text(HyBooleanValueExpression expr) {
		if (expr.isValue) {
			return "true"
		} else {
			return "false"
		}
	}

	def text(HyDivisionExpression expr) {
		"/"
	}

	def text(HyMultiplicationExpression expr) {
		"*"
	}

	def text(HySubtractionExpression expr) {
		"-"
	}

	def text(HyAdditionExpression expr) {
		"+"
	}

	def text(HyValueExpression expr) {
		if (expr.value !== null) {
			if (expr.value instanceof HyNumberValue) {
				return (expr.value as HyNumberValue).value.toString
			} else if (expr.value instanceof HyStringValue) {
				return (expr.value as HyStringValue).value
			} else if (expr.value instanceof HyBooleanValue) {
				return (expr.value as HyBooleanValue).value.toString
			} else if (expr.value instanceof HyEnumValue) {
				var HyEnumValue enumValue = (expr.value as HyEnumValue)
				var label = "";

				if (enumValue.enum !== null) {
					label += enumValue.enum.name;
					label += "."
				}

				if (enumValue.enumLiteral !== null) {
					label += enumValue.enumLiteral.name
				}

				return label;
			}
		}
	}

	def text(HyNestedArithmeticalValueExpression expr) {
		"Nested"
	}

	def text(HyContextInformationReferenceExpression expr) {
		if (expr.contextInformation !== null) {
			return expr.contextInformation.name
		}
	}

	def text(HyAttributeReferenceExpression expr) {
		if (expr.attribute !== null) {
			var label = "(feature id: " + expr.attribute.feature.id + ").";
			label += "(attribute id: " + expr.attribute.id + ")";
		}
	}

//
//	def image(Greeting ele) {
//		'Greeting.gif'
//	}
}
