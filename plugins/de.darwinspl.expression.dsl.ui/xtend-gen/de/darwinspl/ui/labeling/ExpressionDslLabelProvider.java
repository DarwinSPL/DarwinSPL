/**
 * generated by Xtext 2.12.0
 */
package de.darwinspl.ui.labeling;

import com.google.inject.Inject;
import eu.hyvar.context.HyContextualInformation;
import eu.hyvar.dataValues.HyBooleanValue;
import eu.hyvar.dataValues.HyEnum;
import eu.hyvar.dataValues.HyEnumLiteral;
import eu.hyvar.dataValues.HyEnumValue;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.dataValues.HyStringValue;
import eu.hyvar.dataValues.HyValue;
import eu.hyvar.feature.HyFeature;
import eu.hyvar.feature.HyFeatureAttribute;
import eu.hyvar.feature.HyVersion;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEqualExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyGreaterExpression;
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression;
import eu.hyvar.feature.expression.HyImpliesExpression;
import eu.hyvar.feature.expression.HyLessExpression;
import eu.hyvar.feature.expression.HyLessOrEqualExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNestedArithmeticalValueExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyNotEqualExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HyRelativeVersionRestrictionOperator;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import org.eclipse.emf.edit.ui.provider.AdapterFactoryLabelProvider;
import org.eclipse.xtext.ui.label.DefaultEObjectLabelProvider;

/**
 * Provides labels for EObjects.
 * 
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#label-provider
 */
@SuppressWarnings("all")
public class ExpressionDslLabelProvider extends DefaultEObjectLabelProvider {
  @Inject
  public ExpressionDslLabelProvider(final AdapterFactoryLabelProvider delegate) {
    super(delegate);
  }
  
  public String text(final HyGreaterExpression expr) {
    return ">";
  }
  
  public String text(final HyLessExpression expr) {
    return "<";
  }
  
  public String text(final HyGreaterOrEqualExpression expr) {
    return ">=";
  }
  
  public String text(final HyLessOrEqualExpression expr) {
    return "<=";
  }
  
  public String text(final HyEqualExpression expr) {
    return "=";
  }
  
  public String text(final HyNotEqualExpression expr) {
    return "!=";
  }
  
  public String text(final HyImpliesExpression expr) {
    return "->";
  }
  
  public String text(final HyEquivalenceExpression expr) {
    return "<->";
  }
  
  public String text(final HyAndExpression expr) {
    return "&&";
  }
  
  public String text(final HyNestedExpression expr) {
    return "Nested";
  }
  
  public String text(final HyFeatureReferenceExpression expr) {
    String label = "Feature (ID ";
    HyFeature _feature = expr.getFeature();
    boolean _tripleNotEquals = (_feature != null);
    if (_tripleNotEquals) {
      String _label = label;
      String _id = expr.getFeature().getId();
      label = (_label + _id);
    }
    String _label_1 = label;
    label = (_label_1 + ")");
    return label;
  }
  
  public String text(final HyConditionalFeatureReferenceExpression expr) {
    String label = "Conditional Feature (ID ";
    HyFeature _feature = expr.getFeature();
    boolean _tripleNotEquals = (_feature != null);
    if (_tripleNotEquals) {
      String _label = label;
      String _id = expr.getFeature().getId();
      label = (_label + _id);
    }
    String _label_1 = label;
    label = (_label_1 + ")");
    return label;
  }
  
  public String text(final HyRelativeVersionRestriction expr) {
    String label = "Version ";
    HyRelativeVersionRestrictionOperator _operator = expr.getOperator();
    boolean _tripleEquals = (_operator == null);
    if (_tripleEquals) {
      return label;
    }
    HyRelativeVersionRestrictionOperator _operator_1 = expr.getOperator();
    if (_operator_1 != null) {
      switch (_operator_1) {
        case EQUAL:
          String _label = label;
          label = (_label + "=");
          break;
        case GREATER_THAN:
          String _label_1 = label;
          label = (_label_1 + ">");
          break;
        case GREATER_THAN_OR_EQUAL:
          String _label_2 = label;
          label = (_label_2 + ">=");
          break;
        case IMPLICIT_EQUAL:
          String _label_3 = label;
          label = (_label_3 + "(implicit) =");
          break;
        case LESS_THAN:
          String _label_4 = label;
          label = (_label_4 + "<");
          break;
        case LESS_THAN_OR_EQUAL:
          String _label_5 = label;
          label = (_label_5 + "<=");
          break;
        default:
          break;
      }
    }
    HyVersion _version = expr.getVersion();
    boolean _tripleEquals_1 = (_version == null);
    if (_tripleEquals_1) {
      return label;
    }
    String _label_6 = label;
    String _number = expr.getVersion().getNumber();
    String _plus = (" " + _number);
    label = (_label_6 + _plus);
    return label;
  }
  
  public String text(final HyVersionRangeRestriction expr) {
    String label = "Version ";
    boolean _isLowerIncluded = expr.isLowerIncluded();
    boolean _not = (!_isLowerIncluded);
    if (_not) {
      String _label = label;
      label = (_label + "(");
    } else {
      String _label_1 = label;
      label = (_label_1 + "[");
    }
    HyVersion _lowerVersion = expr.getLowerVersion();
    boolean _tripleNotEquals = (_lowerVersion != null);
    if (_tripleNotEquals) {
      String _label_2 = label;
      String _number = expr.getLowerVersion().getNumber();
      label = (_label_2 + _number);
    }
    String _label_3 = label;
    label = (_label_3 + " - ");
    HyVersion _upperVersion = expr.getUpperVersion();
    boolean _tripleNotEquals_1 = (_upperVersion != null);
    if (_tripleNotEquals_1) {
      String _label_4 = label;
      String _number_1 = expr.getUpperVersion().getNumber();
      label = (_label_4 + _number_1);
    }
    boolean _isUpperIncluded = expr.isUpperIncluded();
    boolean _not_1 = (!_isUpperIncluded);
    if (_not_1) {
      String _label_5 = label;
      label = (_label_5 + ")");
    } else {
      String _label_6 = label;
      label = (_label_6 + "]");
    }
    return label;
  }
  
  public String text(final HyBooleanValueExpression expr) {
    boolean _isValue = expr.isValue();
    if (_isValue) {
      return "true";
    } else {
      return "false";
    }
  }
  
  public String text(final HyDivisionExpression expr) {
    return "/";
  }
  
  public String text(final HyMultiplicationExpression expr) {
    return "*";
  }
  
  public String text(final HySubtractionExpression expr) {
    return "-";
  }
  
  public String text(final HyAdditionExpression expr) {
    return "+";
  }
  
  public String text(final HyValueExpression expr) {
    HyValue _value = expr.getValue();
    boolean _tripleNotEquals = (_value != null);
    if (_tripleNotEquals) {
      HyValue _value_1 = expr.getValue();
      if ((_value_1 instanceof HyNumberValue)) {
        HyValue _value_2 = expr.getValue();
        return Integer.valueOf(((HyNumberValue) _value_2).getValue()).toString();
      } else {
        HyValue _value_3 = expr.getValue();
        if ((_value_3 instanceof HyStringValue)) {
          HyValue _value_4 = expr.getValue();
          return ((HyStringValue) _value_4).getValue();
        } else {
          HyValue _value_5 = expr.getValue();
          if ((_value_5 instanceof HyBooleanValue)) {
            HyValue _value_6 = expr.getValue();
            return Boolean.valueOf(((HyBooleanValue) _value_6).isValue()).toString();
          } else {
            HyValue _value_7 = expr.getValue();
            if ((_value_7 instanceof HyEnumValue)) {
              HyValue _value_8 = expr.getValue();
              HyEnumValue enumValue = ((HyEnumValue) _value_8);
              String label = "";
              HyEnum _enum = enumValue.getEnum();
              boolean _tripleNotEquals_1 = (_enum != null);
              if (_tripleNotEquals_1) {
                String _label = label;
                String _name = enumValue.getEnum().getName();
                label = (_label + _name);
                String _label_1 = label;
                label = (_label_1 + ".");
              }
              HyEnumLiteral _enumLiteral = enumValue.getEnumLiteral();
              boolean _tripleNotEquals_2 = (_enumLiteral != null);
              if (_tripleNotEquals_2) {
                String _label_2 = label;
                String _name_1 = enumValue.getEnumLiteral().getName();
                label = (_label_2 + _name_1);
              }
              return label;
            }
          }
        }
      }
    }
    return null;
  }
  
  public String text(final HyNestedArithmeticalValueExpression expr) {
    return "Nested";
  }
  
  public String text(final HyContextInformationReferenceExpression expr) {
    HyContextualInformation _contextInformation = expr.getContextInformation();
    boolean _tripleNotEquals = (_contextInformation != null);
    if (_tripleNotEquals) {
      return expr.getContextInformation().getName();
    }
    return null;
  }
  
  public String text(final HyAttributeReferenceExpression expr) {
    String _xifexpression = null;
    HyFeatureAttribute _attribute = expr.getAttribute();
    boolean _tripleNotEquals = (_attribute != null);
    if (_tripleNotEquals) {
      String _xblockexpression = null;
      {
        String _id = expr.getAttribute().getFeature().getId();
        String _plus = ("(feature id: " + _id);
        String label = (_plus + ").");
        String _label = label;
        String _id_1 = expr.getAttribute().getId();
        String _plus_1 = ("(attribute id: " + _id_1);
        String _plus_2 = (_plus_1 + ")");
        _xblockexpression = label = (_label + _plus_2);
      }
      _xifexpression = _xblockexpression;
    }
    return _xifexpression;
  }
}
