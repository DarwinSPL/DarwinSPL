/*
 * generated by Xtext 2.12.0
 */
package de.darwinspl.constraint.dsl.serializer;

import com.google.inject.Inject;
import de.darwinspl.constraint.dsl.services.ConstraintDslGrammarAccess;
import de.darwinspl.serializer.ExpressionDslSemanticSequencer;
import eu.hyvar.dataValues.HyBooleanValue;
import eu.hyvar.dataValues.HyDataValuesPackage;
import eu.hyvar.dataValues.HyEnumValue;
import eu.hyvar.dataValues.HyNumberValue;
import eu.hyvar.dataValues.HyStringValue;
import eu.hyvar.feature.constraint.HyConstraint;
import eu.hyvar.feature.constraint.HyConstraintModel;
import eu.hyvar.feature.constraint.HyConstraintPackage;
import eu.hyvar.feature.expression.HyAdditionExpression;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyAttributeReferenceExpression;
import eu.hyvar.feature.expression.HyBooleanValueExpression;
import eu.hyvar.feature.expression.HyConditionalFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyContextInformationReferenceExpression;
import eu.hyvar.feature.expression.HyDivisionExpression;
import eu.hyvar.feature.expression.HyEqualExpression;
import eu.hyvar.feature.expression.HyEquivalenceExpression;
import eu.hyvar.feature.expression.HyExpressionPackage;
import eu.hyvar.feature.expression.HyFeatureReferenceExpression;
import eu.hyvar.feature.expression.HyGreaterExpression;
import eu.hyvar.feature.expression.HyGreaterOrEqualExpression;
import eu.hyvar.feature.expression.HyImpliesExpression;
import eu.hyvar.feature.expression.HyLessExpression;
import eu.hyvar.feature.expression.HyLessOrEqualExpression;
import eu.hyvar.feature.expression.HyMultiplicationExpression;
import eu.hyvar.feature.expression.HyNestedArithmeticalValueExpression;
import eu.hyvar.feature.expression.HyNestedExpression;
import eu.hyvar.feature.expression.HyNotEqualExpression;
import eu.hyvar.feature.expression.HyNotExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import eu.hyvar.feature.expression.HyRelativeVersionRestriction;
import eu.hyvar.feature.expression.HySubtractionExpression;
import eu.hyvar.feature.expression.HyValueExpression;
import eu.hyvar.feature.expression.HyVersionRangeRestriction;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class ConstraintDslSemanticSequencer extends ExpressionDslSemanticSequencer {

	@Inject
	private ConstraintDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == HyConstraintPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyConstraintPackage.HY_CONSTRAINT:
				sequence_HyConstraint(context, (HyConstraint) semanticObject); 
				return; 
			case HyConstraintPackage.HY_CONSTRAINT_MODEL:
				sequence_HyConstraintModel(context, (HyConstraintModel) semanticObject); 
				return; 
			}
		else if (epackage == HyDataValuesPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyDataValuesPackage.HY_BOOLEAN_VALUE:
				sequence_HyBooleanValue(context, (HyBooleanValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_ENUM_VALUE:
				sequence_HyEnumValue(context, (HyEnumValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_NUMBER_VALUE:
				sequence_HyNumberValue(context, (HyNumberValue) semanticObject); 
				return; 
			case HyDataValuesPackage.HY_STRING_VALUE:
				sequence_HyStringValue(context, (HyStringValue) semanticObject); 
				return; 
			}
		else if (epackage == HyExpressionPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case HyExpressionPackage.HY_ADDITION_EXPRESSION:
				sequence_HyAdditionExpression(context, (HyAdditionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_AND_EXPRESSION:
				sequence_HyAndExpression(context, (HyAndExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_ATTRIBUTE_REFERENCE_EXPRESSION:
				sequence_HyAttributeReferenceExpression(context, (HyAttributeReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_BOOLEAN_VALUE_EXPRESSION:
				sequence_HyBooleanValueExpression(context, (HyBooleanValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONDITIONAL_FEATURE_REFERENCE_EXPRESSION:
				sequence_HyConditionalFeatureReferenceExpression(context, (HyConditionalFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_CONTEXT_INFORMATION_REFERENCE_EXPRESSION:
				sequence_HyContextInformationReferenceExpression(context, (HyContextInformationReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_DIVISION_EXPRESSION:
				sequence_HyDivisionExpression(context, (HyDivisionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUAL_EXPRESSION:
				sequence_HyEqualExpression(context, (HyEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_EQUIVALENCE_EXPRESSION:
				sequence_HyEquivalenceExpression(context, (HyEquivalenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_FEATURE_REFERENCE_EXPRESSION:
				sequence_HyFeatureReferenceExpression(context, (HyFeatureReferenceExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_EXPRESSION:
				sequence_HyGreaterExpression(context, (HyGreaterExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_GREATER_OR_EQUAL_EXPRESSION:
				sequence_HyGreaterOrEqualExpression(context, (HyGreaterOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_IMPLIES_EXPRESSION:
				sequence_HyImpliesExpression(context, (HyImpliesExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_EXPRESSION:
				sequence_HyLessExpression(context, (HyLessExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_LESS_OR_EQUAL_EXPRESSION:
				sequence_HyLessOrEqualExpression(context, (HyLessOrEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_MULTIPLICATION_EXPRESSION:
				sequence_HyMultiplicationExpression(context, (HyMultiplicationExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_ARITHMETICAL_VALUE_EXPRESSION:
				sequence_HyNestedArithmeticalValueExpression(context, (HyNestedArithmeticalValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NESTED_EXPRESSION:
				sequence_HyNestedExpression(context, (HyNestedExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NOT_EQUAL_EXPRESSION:
				sequence_HyNotEqualExpression(context, (HyNotEqualExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_NOT_EXPRESSION:
				sequence_HyNotExpression(context, (HyNotExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_OR_EXPRESSION:
				sequence_HyOrExpression(context, (HyOrExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_RELATIVE_VERSION_RESTRICTION:
				sequence_HyRelativeVersionRestriction(context, (HyRelativeVersionRestriction) semanticObject); 
				return; 
			case HyExpressionPackage.HY_SUBTRACTION_EXPRESSION:
				sequence_HySubtractionExpression(context, (HySubtractionExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VALUE_EXPRESSION:
				sequence_HyValueExpression(context, (HyValueExpression) semanticObject); 
				return; 
			case HyExpressionPackage.HY_VERSION_RANGE_RESTRICTION:
				sequence_HyVersionRangeRestriction(context, (HyVersionRangeRestriction) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     HyConstraintModel returns HyConstraintModel
	 *
	 * Constraint:
	 *     constraints+=HyConstraint+
	 */
	protected void sequence_HyConstraintModel(ISerializationContext context, HyConstraintModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HyConstraint returns HyConstraint
	 *
	 * Constraint:
	 *     rootExpression=HyExpression
	 */
	protected void sequence_HyConstraint(ISerializationContext context, HyConstraint semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, HyConstraintPackage.Literals.HY_CONSTRAINT__ROOT_EXPRESSION) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, HyConstraintPackage.Literals.HY_CONSTRAINT__ROOT_EXPRESSION));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHyConstraintAccess().getRootExpressionHyExpressionParserRuleCall_0(), semanticObject.getRootExpression());
		feeder.finish();
	}
	
	
}
