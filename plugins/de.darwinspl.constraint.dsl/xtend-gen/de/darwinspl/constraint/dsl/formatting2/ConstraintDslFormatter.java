/**
 * generated by Xtext 2.12.0
 */
package de.darwinspl.constraint.dsl.formatting2;

import com.google.inject.Inject;
import de.darwinspl.constraint.dsl.services.ConstraintDslGrammarAccess;
import de.darwinspl.formatting2.ExpressionDslFormatter;
import eu.hyvar.feature.constraint.HyConstraint;
import eu.hyvar.feature.constraint.HyConstraintModel;
import eu.hyvar.feature.expression.HyAndExpression;
import eu.hyvar.feature.expression.HyExpression;
import eu.hyvar.feature.expression.HyOrExpression;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ConstraintDslFormatter extends ExpressionDslFormatter {
  @Inject
  @Extension
  private ConstraintDslGrammarAccess _constraintDslGrammarAccess;
  
  protected void _format(final HyConstraintModel hyConstraintModel, @Extension final IFormattableDocument document) {
    EList<HyConstraint> _constraints = hyConstraintModel.getConstraints();
    for (final HyConstraint hyConstraint : _constraints) {
      document.<HyConstraint>format(hyConstraint);
    }
  }
  
  protected void _format(final HyConstraint hyConstraint, @Extension final IFormattableDocument document) {
    document.<HyExpression>format(hyConstraint.getRootExpression());
  }
  
  public void format(final Object hyConstraint, final IFormattableDocument document) {
    if (hyConstraint instanceof HyAndExpression) {
      _format((HyAndExpression)hyConstraint, document);
      return;
    } else if (hyConstraint instanceof HyOrExpression) {
      _format((HyOrExpression)hyConstraint, document);
      return;
    } else if (hyConstraint instanceof XtextResource) {
      _format((XtextResource)hyConstraint, document);
      return;
    } else if (hyConstraint instanceof HyConstraint) {
      _format((HyConstraint)hyConstraint, document);
      return;
    } else if (hyConstraint instanceof HyConstraintModel) {
      _format((HyConstraintModel)hyConstraint, document);
      return;
    } else if (hyConstraint instanceof EObject) {
      _format((EObject)hyConstraint, document);
      return;
    } else if (hyConstraint == null) {
      _format((Void)null, document);
      return;
    } else if (hyConstraint != null) {
      _format(hyConstraint, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(hyConstraint, document).toString());
    }
  }
}
